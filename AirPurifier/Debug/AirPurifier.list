
AirPurifier.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ed4  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080020c8  080020c8  000120c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002118  08002118  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002118  08002118  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002118  08002118  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002118  08002118  00012118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800211c  0800211c  0001211c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002120  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  2000000c  0800212c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  0800212c  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000828a  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001759  00000000  00000000  000282cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e8  00000000  00000000  00029a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000630  00000000  00000000  0002a110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000271c4  00000000  00000000  0002a740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000073d8  00000000  00000000  00051904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f744b  00000000  00000000  00058cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00150127  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019c4  00000000  00000000  0015017c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000000c 	.word	0x2000000c
 8000210:	00000000 	.word	0x00000000
 8000214:	080020b0 	.word	0x080020b0

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000010 	.word	0x20000010
 8000230:	080020b0 	.word	0x080020b0

08000234 <gpioInit>:
#include "Header.h"
#include "stm32l552xx.h"
//#include "stm32l5xx_hal_gpio.h"
//#include "testheader.h"
void gpioInit(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0

	blueLed.port = GPIOB;
 8000238:	4b30      	ldr	r3, [pc, #192]	; (80002fc <gpioInit+0xc8>)
 800023a:	4a31      	ldr	r2, [pc, #196]	; (8000300 <gpioInit+0xcc>)
 800023c:	601a      	str	r2, [r3, #0]
	blueLed.pin = GPIO_P_7;
 800023e:	4b2f      	ldr	r3, [pc, #188]	; (80002fc <gpioInit+0xc8>)
 8000240:	2280      	movs	r2, #128	; 0x80
 8000242:	809a      	strh	r2, [r3, #4]

	redLed.port = GPIOA;
 8000244:	4b2f      	ldr	r3, [pc, #188]	; (8000304 <gpioInit+0xd0>)
 8000246:	4a30      	ldr	r2, [pc, #192]	; (8000308 <gpioInit+0xd4>)
 8000248:	601a      	str	r2, [r3, #0]
	redLed.pin  = GPIO_P_9;
 800024a:	4b2e      	ldr	r3, [pc, #184]	; (8000304 <gpioInit+0xd0>)
 800024c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000250:	809a      	strh	r2, [r3, #4]

	greenLed.port = GPIOC;
 8000252:	4b2e      	ldr	r3, [pc, #184]	; (800030c <gpioInit+0xd8>)
 8000254:	4a2e      	ldr	r2, [pc, #184]	; (8000310 <gpioInit+0xdc>)
 8000256:	601a      	str	r2, [r3, #0]
	greenLed.pin = GPIO_P_7;
 8000258:	4b2c      	ldr	r3, [pc, #176]	; (800030c <gpioInit+0xd8>)
 800025a:	2280      	movs	r2, #128	; 0x80
 800025c:	809a      	strh	r2, [r3, #4]


	lampRelay.port 		= GPIOF;
 800025e:	4b2d      	ldr	r3, [pc, #180]	; (8000314 <gpioInit+0xe0>)
 8000260:	4a2d      	ldr	r2, [pc, #180]	; (8000318 <gpioInit+0xe4>)
 8000262:	601a      	str	r2, [r3, #0]
	lampRelay.pin 		= GPIO_P_3;
 8000264:	4b2b      	ldr	r3, [pc, #172]	; (8000314 <gpioInit+0xe0>)
 8000266:	2208      	movs	r2, #8
 8000268:	809a      	strh	r2, [r3, #4]

	aqiSensor.port 		= GPIOC;
 800026a:	4b2c      	ldr	r3, [pc, #176]	; (800031c <gpioInit+0xe8>)
 800026c:	4a28      	ldr	r2, [pc, #160]	; (8000310 <gpioInit+0xdc>)
 800026e:	601a      	str	r2, [r3, #0]
	aqiSensor.pin  		= GPIO_P_3;
 8000270:	4b2a      	ldr	r3, [pc, #168]	; (800031c <gpioInit+0xe8>)
 8000272:	2208      	movs	r2, #8
 8000274:	809a      	strh	r2, [r3, #4]

	uvcSensor.port 		= GPIOB;
 8000276:	4b2a      	ldr	r3, [pc, #168]	; (8000320 <gpioInit+0xec>)
 8000278:	4a21      	ldr	r2, [pc, #132]	; (8000300 <gpioInit+0xcc>)
 800027a:	601a      	str	r2, [r3, #0]
	uvcSensor.pin 		= GPIO_P_0;
 800027c:	4b28      	ldr	r3, [pc, #160]	; (8000320 <gpioInit+0xec>)
 800027e:	2201      	movs	r2, #1
 8000280:	809a      	strh	r2, [r3, #4]

	mode.port	  		= GPIOD;
 8000282:	4b28      	ldr	r3, [pc, #160]	; (8000324 <gpioInit+0xf0>)
 8000284:	4a28      	ldr	r2, [pc, #160]	; (8000328 <gpioInit+0xf4>)
 8000286:	601a      	str	r2, [r3, #0]
	mode.pin	  		= GPIO_P_7;
 8000288:	4b26      	ldr	r3, [pc, #152]	; (8000324 <gpioInit+0xf0>)
 800028a:	2280      	movs	r2, #128	; 0x80
 800028c:	809a      	strh	r2, [r3, #4]

	modeNormalLed.port	= GPIOC;
 800028e:	4b27      	ldr	r3, [pc, #156]	; (800032c <gpioInit+0xf8>)
 8000290:	4a1f      	ldr	r2, [pc, #124]	; (8000310 <gpioInit+0xdc>)
 8000292:	601a      	str	r2, [r3, #0]
	modeNormalLed.pin	= GPIO_P_14;
 8000294:	4b25      	ldr	r3, [pc, #148]	; (800032c <gpioInit+0xf8>)
 8000296:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800029a:	809a      	strh	r2, [r3, #4]

	modeSleepLed.port	= GPIOC;
 800029c:	4b24      	ldr	r3, [pc, #144]	; (8000330 <gpioInit+0xfc>)
 800029e:	4a1c      	ldr	r2, [pc, #112]	; (8000310 <gpioInit+0xdc>)
 80002a0:	601a      	str	r2, [r3, #0]
	modeSleepLed.pin	= GPIO_P_15;
 80002a2:	4b23      	ldr	r3, [pc, #140]	; (8000330 <gpioInit+0xfc>)
 80002a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80002a8:	809a      	strh	r2, [r3, #4]

	modeAutoLed.port	= GPIOH;
 80002aa:	4b22      	ldr	r3, [pc, #136]	; (8000334 <gpioInit+0x100>)
 80002ac:	4a22      	ldr	r2, [pc, #136]	; (8000338 <gpioInit+0x104>)
 80002ae:	601a      	str	r2, [r3, #0]
	modeAutoLed.pin		= GPIO_P_0;
 80002b0:	4b20      	ldr	r3, [pc, #128]	; (8000334 <gpioInit+0x100>)
 80002b2:	2201      	movs	r2, #1
 80002b4:	809a      	strh	r2, [r3, #4]

	modePowerSaveLed.port= GPIOH;
 80002b6:	4b21      	ldr	r3, [pc, #132]	; (800033c <gpioInit+0x108>)
 80002b8:	4a1f      	ldr	r2, [pc, #124]	; (8000338 <gpioInit+0x104>)
 80002ba:	601a      	str	r2, [r3, #0]
	modePowerSaveLed.pin = GPIO_P_1;
 80002bc:	4b1f      	ldr	r3, [pc, #124]	; (800033c <gpioInit+0x108>)
 80002be:	2202      	movs	r2, #2
 80002c0:	809a      	strh	r2, [r3, #4]

	fanSpeedLed25.port	= GPIOD;
 80002c2:	4b1f      	ldr	r3, [pc, #124]	; (8000340 <gpioInit+0x10c>)
 80002c4:	4a18      	ldr	r2, [pc, #96]	; (8000328 <gpioInit+0xf4>)
 80002c6:	601a      	str	r2, [r3, #0]
	fanSpeedLed25.pin	= GPIO_P_7;
 80002c8:	4b1d      	ldr	r3, [pc, #116]	; (8000340 <gpioInit+0x10c>)
 80002ca:	2280      	movs	r2, #128	; 0x80
 80002cc:	809a      	strh	r2, [r3, #4]

	fanSpeedLed50.port	= GPIOE;
 80002ce:	4b1d      	ldr	r3, [pc, #116]	; (8000344 <gpioInit+0x110>)
 80002d0:	4a1d      	ldr	r2, [pc, #116]	; (8000348 <gpioInit+0x114>)
 80002d2:	601a      	str	r2, [r3, #0]
	fanSpeedLed50.pin	= GPIO_P_3;
 80002d4:	4b1b      	ldr	r3, [pc, #108]	; (8000344 <gpioInit+0x110>)
 80002d6:	2208      	movs	r2, #8
 80002d8:	809a      	strh	r2, [r3, #4]

	fanSpeedLed75.port	= GPIOD;
 80002da:	4b1c      	ldr	r3, [pc, #112]	; (800034c <gpioInit+0x118>)
 80002dc:	4a12      	ldr	r2, [pc, #72]	; (8000328 <gpioInit+0xf4>)
 80002de:	601a      	str	r2, [r3, #0]
	fanSpeedLed75.pin	= GPIO_P_1;
 80002e0:	4b1a      	ldr	r3, [pc, #104]	; (800034c <gpioInit+0x118>)
 80002e2:	2202      	movs	r2, #2
 80002e4:	809a      	strh	r2, [r3, #4]

	fanSpeedLed100.port	= GPIOD;
 80002e6:	4b1a      	ldr	r3, [pc, #104]	; (8000350 <gpioInit+0x11c>)
 80002e8:	4a0f      	ldr	r2, [pc, #60]	; (8000328 <gpioInit+0xf4>)
 80002ea:	601a      	str	r2, [r3, #0]
	fanSpeedLed100.pin	= GPIO_P_0;
 80002ec:	4b18      	ldr	r3, [pc, #96]	; (8000350 <gpioInit+0x11c>)
 80002ee:	2201      	movs	r2, #1
 80002f0:	809a      	strh	r2, [r3, #4]

}
 80002f2:	bf00      	nop
 80002f4:	46bd      	mov	sp, r7
 80002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fa:	4770      	bx	lr
 80002fc:	20000070 	.word	0x20000070
 8000300:	42020400 	.word	0x42020400
 8000304:	20000028 	.word	0x20000028
 8000308:	42020000 	.word	0x42020000
 800030c:	20000048 	.word	0x20000048
 8000310:	42020800 	.word	0x42020800
 8000314:	20000050 	.word	0x20000050
 8000318:	42021400 	.word	0x42021400
 800031c:	20000068 	.word	0x20000068
 8000320:	20000058 	.word	0x20000058
 8000324:	20000060 	.word	0x20000060
 8000328:	42020c00 	.word	0x42020c00
 800032c:	20000098 	.word	0x20000098
 8000330:	20000030 	.word	0x20000030
 8000334:	20000040 	.word	0x20000040
 8000338:	42021c00 	.word	0x42021c00
 800033c:	20000088 	.word	0x20000088
 8000340:	20000038 	.word	0x20000038
 8000344:	20000090 	.word	0x20000090
 8000348:	42021000 	.word	0x42021000
 800034c:	20000078 	.word	0x20000078
 8000350:	20000080 	.word	0x20000080

08000354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000358:	f000 fae9 	bl	800092e <HAL_Init>

  /* USER CODE BEGIN Init */
    gpioInit();
 800035c:	f7ff ff6a 	bl	8000234 <gpioInit>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000360:	f000 f826 	bl	80003b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000364:	f000 f888 	bl	8000478 <MX_GPIO_Init>
  MX_ICACHE_Init();
 8000368:	f000 f873 	bl	8000452 <MX_ICACHE_Init>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //HAL_GPIO_WritePin(Led.port, Led.pin,  GPIO_PIN_SET);
	  HAL_GPIO_TogglePin(greenLed.port, greenLed.pin);
 800036c:	4b0d      	ldr	r3, [pc, #52]	; (80003a4 <main+0x50>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a0c      	ldr	r2, [pc, #48]	; (80003a4 <main+0x50>)
 8000372:	8892      	ldrh	r2, [r2, #4]
 8000374:	4611      	mov	r1, r2
 8000376:	4618      	mov	r0, r3
 8000378:	f000 fdf0 	bl	8000f5c <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(blueLed.port, blueLed.pin);
 800037c:	4b0a      	ldr	r3, [pc, #40]	; (80003a8 <main+0x54>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a09      	ldr	r2, [pc, #36]	; (80003a8 <main+0x54>)
 8000382:	8892      	ldrh	r2, [r2, #4]
 8000384:	4611      	mov	r1, r2
 8000386:	4618      	mov	r0, r3
 8000388:	f000 fde8 	bl	8000f5c <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(redLed.port, redLed.pin);
 800038c:	4b07      	ldr	r3, [pc, #28]	; (80003ac <main+0x58>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a06      	ldr	r2, [pc, #24]	; (80003ac <main+0x58>)
 8000392:	8892      	ldrh	r2, [r2, #4]
 8000394:	4611      	mov	r1, r2
 8000396:	4618      	mov	r0, r3
 8000398:	f000 fde0 	bl	8000f5c <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 800039c:	2032      	movs	r0, #50	; 0x32
 800039e:	f000 fb3d 	bl	8000a1c <HAL_Delay>
	  HAL_GPIO_TogglePin(greenLed.port, greenLed.pin);
 80003a2:	e7e3      	b.n	800036c <main+0x18>
 80003a4:	20000048 	.word	0x20000048
 80003a8:	20000070 	.word	0x20000070
 80003ac:	20000028 	.word	0x20000028

080003b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b098      	sub	sp, #96	; 0x60
 80003b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003b6:	f107 0318 	add.w	r3, r7, #24
 80003ba:	2248      	movs	r2, #72	; 0x48
 80003bc:	2100      	movs	r1, #0
 80003be:	4618      	mov	r0, r3
 80003c0:	f001 fe6e 	bl	80020a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c4:	1d3b      	adds	r3, r7, #4
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	605a      	str	r2, [r3, #4]
 80003cc:	609a      	str	r2, [r3, #8]
 80003ce:	60da      	str	r2, [r3, #12]
 80003d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003d6:	f000 fe19 	bl	800100c <HAL_PWREx_ControlVoltageScaling>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80003e0:	f000 f96a 	bl	80006b8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003e4:	2302      	movs	r3, #2
 80003e6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ee:	2340      	movs	r3, #64	; 0x40
 80003f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003f2:	2302      	movs	r3, #2
 80003f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003f6:	2302      	movs	r3, #2
 80003f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 80003fa:	2301      	movs	r3, #1
 80003fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 9;
 80003fe:	2309      	movs	r3, #9
 8000400:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000402:	2307      	movs	r3, #7
 8000404:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000406:	2302      	movs	r3, #2
 8000408:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800040a:	2302      	movs	r3, #2
 800040c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800040e:	f107 0318 	add.w	r3, r7, #24
 8000412:	4618      	mov	r0, r3
 8000414:	f000 fe8a 	bl	800112c <HAL_RCC_OscConfig>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800041e:	f000 f94b 	bl	80006b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000422:	230f      	movs	r3, #15
 8000424:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000426:	2303      	movs	r3, #3
 8000428:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800042a:	2300      	movs	r3, #0
 800042c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800042e:	2300      	movs	r3, #0
 8000430:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000432:	2300      	movs	r3, #0
 8000434:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	2103      	movs	r1, #3
 800043a:	4618      	mov	r0, r3
 800043c:	f001 fb58 	bl	8001af0 <HAL_RCC_ClockConfig>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000446:	f000 f937 	bl	80006b8 <Error_Handler>
  }
}
 800044a:	bf00      	nop
 800044c:	3760      	adds	r7, #96	; 0x60
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}

08000452 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000452:	b580      	push	{r7, lr}
 8000454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ICACHE_Init 1 */

  /* USER CODE END ICACHE_Init 1 */
  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000456:	2000      	movs	r0, #0
 8000458:	f000 fd9a 	bl	8000f90 <HAL_ICACHE_ConfigAssociativityMode>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000462:	f000 f929 	bl	80006b8 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000466:	f000 fdb3 	bl	8000fd0 <HAL_ICACHE_Enable>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000470:	f000 f922 	bl	80006b8 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000474:	bf00      	nop
 8000476:	bd80      	pop	{r7, pc}

08000478 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b08c      	sub	sp, #48	; 0x30
 800047c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047e:	f107 031c 	add.w	r3, r7, #28
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]
 8000488:	609a      	str	r2, [r3, #8]
 800048a:	60da      	str	r2, [r3, #12]
 800048c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800048e:	4b82      	ldr	r3, [pc, #520]	; (8000698 <MX_GPIO_Init+0x220>)
 8000490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000492:	4a81      	ldr	r2, [pc, #516]	; (8000698 <MX_GPIO_Init+0x220>)
 8000494:	f043 0310 	orr.w	r3, r3, #16
 8000498:	64d3      	str	r3, [r2, #76]	; 0x4c
 800049a:	4b7f      	ldr	r3, [pc, #508]	; (8000698 <MX_GPIO_Init+0x220>)
 800049c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800049e:	f003 0310 	and.w	r3, r3, #16
 80004a2:	61bb      	str	r3, [r7, #24]
 80004a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a6:	4b7c      	ldr	r3, [pc, #496]	; (8000698 <MX_GPIO_Init+0x220>)
 80004a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004aa:	4a7b      	ldr	r2, [pc, #492]	; (8000698 <MX_GPIO_Init+0x220>)
 80004ac:	f043 0304 	orr.w	r3, r3, #4
 80004b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004b2:	4b79      	ldr	r3, [pc, #484]	; (8000698 <MX_GPIO_Init+0x220>)
 80004b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004b6:	f003 0304 	and.w	r3, r3, #4
 80004ba:	617b      	str	r3, [r7, #20]
 80004bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004be:	4b76      	ldr	r3, [pc, #472]	; (8000698 <MX_GPIO_Init+0x220>)
 80004c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004c2:	4a75      	ldr	r2, [pc, #468]	; (8000698 <MX_GPIO_Init+0x220>)
 80004c4:	f043 0320 	orr.w	r3, r3, #32
 80004c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ca:	4b73      	ldr	r3, [pc, #460]	; (8000698 <MX_GPIO_Init+0x220>)
 80004cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ce:	f003 0320 	and.w	r3, r3, #32
 80004d2:	613b      	str	r3, [r7, #16]
 80004d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004d6:	4b70      	ldr	r3, [pc, #448]	; (8000698 <MX_GPIO_Init+0x220>)
 80004d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004da:	4a6f      	ldr	r2, [pc, #444]	; (8000698 <MX_GPIO_Init+0x220>)
 80004dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e2:	4b6d      	ldr	r3, [pc, #436]	; (8000698 <MX_GPIO_Init+0x220>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ee:	4b6a      	ldr	r3, [pc, #424]	; (8000698 <MX_GPIO_Init+0x220>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	4a69      	ldr	r2, [pc, #420]	; (8000698 <MX_GPIO_Init+0x220>)
 80004f4:	f043 0301 	orr.w	r3, r3, #1
 80004f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fa:	4b67      	ldr	r3, [pc, #412]	; (8000698 <MX_GPIO_Init+0x220>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000506:	4b64      	ldr	r3, [pc, #400]	; (8000698 <MX_GPIO_Init+0x220>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	4a63      	ldr	r2, [pc, #396]	; (8000698 <MX_GPIO_Init+0x220>)
 800050c:	f043 0302 	orr.w	r3, r3, #2
 8000510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000512:	4b61      	ldr	r3, [pc, #388]	; (8000698 <MX_GPIO_Init+0x220>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	f003 0302 	and.w	r3, r3, #2
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800051e:	4b5e      	ldr	r3, [pc, #376]	; (8000698 <MX_GPIO_Init+0x220>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	4a5d      	ldr	r2, [pc, #372]	; (8000698 <MX_GPIO_Init+0x220>)
 8000524:	f043 0308 	orr.w	r3, r3, #8
 8000528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052a:	4b5b      	ldr	r3, [pc, #364]	; (8000698 <MX_GPIO_Init+0x220>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	f003 0308 	and.w	r3, r3, #8
 8000532:	603b      	str	r3, [r7, #0]
 8000534:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, mode_Pin|fanSpeedLed50_Pin, GPIO_PIN_RESET);
 8000536:	2200      	movs	r2, #0
 8000538:	210c      	movs	r1, #12
 800053a:	4858      	ldr	r0, [pc, #352]	; (800069c <MX_GPIO_Init+0x224>)
 800053c:	f000 fcf6 	bl	8000f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, modeNormalLed_Pin|modeSleepLed_Pin|greenLed_Pin, GPIO_PIN_RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	f24c 0180 	movw	r1, #49280	; 0xc080
 8000546:	4856      	ldr	r0, [pc, #344]	; (80006a0 <MX_GPIO_Init+0x228>)
 8000548:	f000 fcf0 	bl	8000f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(lampRelay_GPIO_Port, lampRelay_Pin, GPIO_PIN_RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	2108      	movs	r1, #8
 8000550:	4854      	ldr	r0, [pc, #336]	; (80006a4 <MX_GPIO_Init+0x22c>)
 8000552:	f000 fceb 	bl	8000f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, modeLedAuto_Pin|modeLedPS_Pin, GPIO_PIN_RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	2103      	movs	r1, #3
 800055a:	4853      	ldr	r0, [pc, #332]	; (80006a8 <MX_GPIO_Init+0x230>)
 800055c:	f000 fce6 	bl	8000f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(redLed_GPIO_Port, redLed_Pin, GPIO_PIN_RESET);
 8000560:	2200      	movs	r2, #0
 8000562:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000566:	4851      	ldr	r0, [pc, #324]	; (80006ac <MX_GPIO_Init+0x234>)
 8000568:	f000 fce0 	bl	8000f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, fanSpeedLed100_Pin|fanSpeedLed75_Pin, GPIO_PIN_RESET);
 800056c:	2200      	movs	r2, #0
 800056e:	2103      	movs	r1, #3
 8000570:	484f      	ldr	r0, [pc, #316]	; (80006b0 <MX_GPIO_Init+0x238>)
 8000572:	f000 fcdb 	bl	8000f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(blueLed_GPIO_Port, blueLed_Pin, GPIO_PIN_RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	2180      	movs	r1, #128	; 0x80
 800057a:	484e      	ldr	r0, [pc, #312]	; (80006b4 <MX_GPIO_Init+0x23c>)
 800057c:	f000 fcd6 	bl	8000f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : mode_Pin fanSpeedLed50_Pin */
  GPIO_InitStruct.Pin = mode_Pin|fanSpeedLed50_Pin;
 8000580:	230c      	movs	r3, #12
 8000582:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000584:	2301      	movs	r3, #1
 8000586:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000588:	2300      	movs	r3, #0
 800058a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058c:	2300      	movs	r3, #0
 800058e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000590:	f107 031c 	add.w	r3, r7, #28
 8000594:	4619      	mov	r1, r3
 8000596:	4841      	ldr	r0, [pc, #260]	; (800069c <MX_GPIO_Init+0x224>)
 8000598:	f000 fb48 	bl	8000c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : modeNormalLed_Pin modeSleepLed_Pin greenLed_Pin */
  GPIO_InitStruct.Pin = modeNormalLed_Pin|modeSleepLed_Pin|greenLed_Pin;
 800059c:	f24c 0380 	movw	r3, #49280	; 0xc080
 80005a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a2:	2301      	movs	r3, #1
 80005a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005aa:	2300      	movs	r3, #0
 80005ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ae:	f107 031c 	add.w	r3, r7, #28
 80005b2:	4619      	mov	r1, r3
 80005b4:	483a      	ldr	r0, [pc, #232]	; (80006a0 <MX_GPIO_Init+0x228>)
 80005b6:	f000 fb39 	bl	8000c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : lampRelay_Pin */
  GPIO_InitStruct.Pin = lampRelay_Pin;
 80005ba:	2308      	movs	r3, #8
 80005bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005be:	2301      	movs	r3, #1
 80005c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c6:	2300      	movs	r3, #0
 80005c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(lampRelay_GPIO_Port, &GPIO_InitStruct);
 80005ca:	f107 031c 	add.w	r3, r7, #28
 80005ce:	4619      	mov	r1, r3
 80005d0:	4834      	ldr	r0, [pc, #208]	; (80006a4 <MX_GPIO_Init+0x22c>)
 80005d2:	f000 fb2b 	bl	8000c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : modeLedAuto_Pin modeLedPS_Pin */
  GPIO_InitStruct.Pin = modeLedAuto_Pin|modeLedPS_Pin;
 80005d6:	2303      	movs	r3, #3
 80005d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005da:	2301      	movs	r3, #1
 80005dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e2:	2300      	movs	r3, #0
 80005e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80005e6:	f107 031c 	add.w	r3, r7, #28
 80005ea:	4619      	mov	r1, r3
 80005ec:	482e      	ldr	r0, [pc, #184]	; (80006a8 <MX_GPIO_Init+0x230>)
 80005ee:	f000 fb1d 	bl	8000c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : aqisensor_Pin */
  GPIO_InitStruct.Pin = aqisensor_Pin;
 80005f2:	2310      	movs	r3, #16
 80005f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005f6:	2303      	movs	r3, #3
 80005f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(aqisensor_GPIO_Port, &GPIO_InitStruct);
 80005fe:	f107 031c 	add.w	r3, r7, #28
 8000602:	4619      	mov	r1, r3
 8000604:	4829      	ldr	r0, [pc, #164]	; (80006ac <MX_GPIO_Init+0x234>)
 8000606:	f000 fb11 	bl	8000c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : uvcSensor_Pin */
  GPIO_InitStruct.Pin = uvcSensor_Pin;
 800060a:	2301      	movs	r3, #1
 800060c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800060e:	2303      	movs	r3, #3
 8000610:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(uvcSensor_GPIO_Port, &GPIO_InitStruct);
 8000616:	f107 031c 	add.w	r3, r7, #28
 800061a:	4619      	mov	r1, r3
 800061c:	4825      	ldr	r0, [pc, #148]	; (80006b4 <MX_GPIO_Init+0x23c>)
 800061e:	f000 fb05 	bl	8000c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : redLed_Pin */
  GPIO_InitStruct.Pin = redLed_Pin;
 8000622:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000628:	2301      	movs	r3, #1
 800062a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	2300      	movs	r3, #0
 800062e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000630:	2300      	movs	r3, #0
 8000632:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(redLed_GPIO_Port, &GPIO_InitStruct);
 8000634:	f107 031c 	add.w	r3, r7, #28
 8000638:	4619      	mov	r1, r3
 800063a:	481c      	ldr	r0, [pc, #112]	; (80006ac <MX_GPIO_Init+0x234>)
 800063c:	f000 faf6 	bl	8000c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : fanSpeedLed100_Pin fanSpeedLed75_Pin */
  GPIO_InitStruct.Pin = fanSpeedLed100_Pin|fanSpeedLed75_Pin;
 8000640:	2303      	movs	r3, #3
 8000642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000644:	2301      	movs	r3, #1
 8000646:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064c:	2300      	movs	r3, #0
 800064e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000650:	f107 031c 	add.w	r3, r7, #28
 8000654:	4619      	mov	r1, r3
 8000656:	4816      	ldr	r0, [pc, #88]	; (80006b0 <MX_GPIO_Init+0x238>)
 8000658:	f000 fae8 	bl	8000c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : fanSpeedLed25_Pin */
  GPIO_InitStruct.Pin = fanSpeedLed25_Pin;
 800065c:	2380      	movs	r3, #128	; 0x80
 800065e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000660:	2300      	movs	r3, #0
 8000662:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(fanSpeedLed25_GPIO_Port, &GPIO_InitStruct);
 8000668:	f107 031c 	add.w	r3, r7, #28
 800066c:	4619      	mov	r1, r3
 800066e:	4810      	ldr	r0, [pc, #64]	; (80006b0 <MX_GPIO_Init+0x238>)
 8000670:	f000 fadc 	bl	8000c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : blueLed_Pin */
  GPIO_InitStruct.Pin = blueLed_Pin;
 8000674:	2380      	movs	r3, #128	; 0x80
 8000676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	2301      	movs	r3, #1
 800067a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	2300      	movs	r3, #0
 8000682:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(blueLed_GPIO_Port, &GPIO_InitStruct);
 8000684:	f107 031c 	add.w	r3, r7, #28
 8000688:	4619      	mov	r1, r3
 800068a:	480a      	ldr	r0, [pc, #40]	; (80006b4 <MX_GPIO_Init+0x23c>)
 800068c:	f000 face 	bl	8000c2c <HAL_GPIO_Init>

}
 8000690:	bf00      	nop
 8000692:	3730      	adds	r7, #48	; 0x30
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40021000 	.word	0x40021000
 800069c:	42021000 	.word	0x42021000
 80006a0:	42020800 	.word	0x42020800
 80006a4:	42021400 	.word	0x42021400
 80006a8:	42021c00 	.word	0x42021c00
 80006ac:	42020000 	.word	0x42020000
 80006b0:	42020c00 	.word	0x42020c00
 80006b4:	42020400 	.word	0x42020400

080006b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006bc:	b672      	cpsid	i
}
 80006be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <Error_Handler+0x8>
	...

080006c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ca:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <HAL_MspInit+0x44>)
 80006cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006ce:	4a0e      	ldr	r2, [pc, #56]	; (8000708 <HAL_MspInit+0x44>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6613      	str	r3, [r2, #96]	; 0x60
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <HAL_MspInit+0x44>)
 80006d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <HAL_MspInit+0x44>)
 80006e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006e6:	4a08      	ldr	r2, [pc, #32]	; (8000708 <HAL_MspInit+0x44>)
 80006e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ec:	6593      	str	r3, [r2, #88]	; 0x58
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <HAL_MspInit+0x44>)
 80006f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80006fa:	f000 fce3 	bl	80010c4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40021000 	.word	0x40021000

0800070c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000710:	e7fe      	b.n	8000710 <NMI_Handler+0x4>

08000712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000716:	e7fe      	b.n	8000716 <HardFault_Handler+0x4>

08000718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800071c:	e7fe      	b.n	800071c <MemManage_Handler+0x4>

0800071e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000722:	e7fe      	b.n	8000722 <BusFault_Handler+0x4>

08000724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000728:	e7fe      	b.n	8000728 <UsageFault_Handler+0x4>

0800072a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr

08000746 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr

08000754 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000758:	f000 f940 	bl	80009dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}

08000760 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <SystemInit+0x20>)
 8000766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800076a:	4a05      	ldr	r2, [pc, #20]	; (8000780 <SystemInit+0x20>)
 800076c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000770:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000784:	b480      	push	{r7}
 8000786:	b087      	sub	sp, #28
 8000788:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800078a:	4b4f      	ldr	r3, [pc, #316]	; (80008c8 <SystemCoreClockUpdate+0x144>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f003 0308 	and.w	r3, r3, #8
 8000792:	2b00      	cmp	r3, #0
 8000794:	d107      	bne.n	80007a6 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000796:	4b4c      	ldr	r3, [pc, #304]	; (80008c8 <SystemCoreClockUpdate+0x144>)
 8000798:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800079c:	0a1b      	lsrs	r3, r3, #8
 800079e:	f003 030f 	and.w	r3, r3, #15
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	e005      	b.n	80007b2 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80007a6:	4b48      	ldr	r3, [pc, #288]	; (80008c8 <SystemCoreClockUpdate+0x144>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	091b      	lsrs	r3, r3, #4
 80007ac:	f003 030f 	and.w	r3, r3, #15
 80007b0:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80007b2:	4a46      	ldr	r2, [pc, #280]	; (80008cc <SystemCoreClockUpdate+0x148>)
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ba:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80007bc:	4b42      	ldr	r3, [pc, #264]	; (80008c8 <SystemCoreClockUpdate+0x144>)
 80007be:	689b      	ldr	r3, [r3, #8]
 80007c0:	f003 030c 	and.w	r3, r3, #12
 80007c4:	2b0c      	cmp	r3, #12
 80007c6:	d866      	bhi.n	8000896 <SystemCoreClockUpdate+0x112>
 80007c8:	a201      	add	r2, pc, #4	; (adr r2, 80007d0 <SystemCoreClockUpdate+0x4c>)
 80007ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ce:	bf00      	nop
 80007d0:	08000805 	.word	0x08000805
 80007d4:	08000897 	.word	0x08000897
 80007d8:	08000897 	.word	0x08000897
 80007dc:	08000897 	.word	0x08000897
 80007e0:	0800080d 	.word	0x0800080d
 80007e4:	08000897 	.word	0x08000897
 80007e8:	08000897 	.word	0x08000897
 80007ec:	08000897 	.word	0x08000897
 80007f0:	08000815 	.word	0x08000815
 80007f4:	08000897 	.word	0x08000897
 80007f8:	08000897 	.word	0x08000897
 80007fc:	08000897 	.word	0x08000897
 8000800:	0800081d 	.word	0x0800081d
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000804:	4a32      	ldr	r2, [pc, #200]	; (80008d0 <SystemCoreClockUpdate+0x14c>)
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	6013      	str	r3, [r2, #0]
      break;
 800080a:	e048      	b.n	800089e <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800080c:	4b30      	ldr	r3, [pc, #192]	; (80008d0 <SystemCoreClockUpdate+0x14c>)
 800080e:	4a31      	ldr	r2, [pc, #196]	; (80008d4 <SystemCoreClockUpdate+0x150>)
 8000810:	601a      	str	r2, [r3, #0]
      break;
 8000812:	e044      	b.n	800089e <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000814:	4b2e      	ldr	r3, [pc, #184]	; (80008d0 <SystemCoreClockUpdate+0x14c>)
 8000816:	4a2f      	ldr	r2, [pc, #188]	; (80008d4 <SystemCoreClockUpdate+0x150>)
 8000818:	601a      	str	r2, [r3, #0]
      break;
 800081a:	e040      	b.n	800089e <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800081c:	4b2a      	ldr	r3, [pc, #168]	; (80008c8 <SystemCoreClockUpdate+0x144>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	f003 0303 	and.w	r3, r3, #3
 8000824:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000826:	4b28      	ldr	r3, [pc, #160]	; (80008c8 <SystemCoreClockUpdate+0x144>)
 8000828:	68db      	ldr	r3, [r3, #12]
 800082a:	091b      	lsrs	r3, r3, #4
 800082c:	f003 030f 	and.w	r3, r3, #15
 8000830:	3301      	adds	r3, #1
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	2b02      	cmp	r3, #2
 8000838:	d003      	beq.n	8000842 <SystemCoreClockUpdate+0xbe>
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	2b03      	cmp	r3, #3
 800083e:	d006      	beq.n	800084e <SystemCoreClockUpdate+0xca>
 8000840:	e00b      	b.n	800085a <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8000842:	4a24      	ldr	r2, [pc, #144]	; (80008d4 <SystemCoreClockUpdate+0x150>)
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	fbb2 f3f3 	udiv	r3, r2, r3
 800084a:	613b      	str	r3, [r7, #16]
          break;
 800084c:	e00b      	b.n	8000866 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800084e:	4a21      	ldr	r2, [pc, #132]	; (80008d4 <SystemCoreClockUpdate+0x150>)
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	fbb2 f3f3 	udiv	r3, r2, r3
 8000856:	613b      	str	r3, [r7, #16]
          break;
 8000858:	e005      	b.n	8000866 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800085a:	697a      	ldr	r2, [r7, #20]
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000862:	613b      	str	r3, [r7, #16]
          break;
 8000864:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8000866:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <SystemCoreClockUpdate+0x144>)
 8000868:	68db      	ldr	r3, [r3, #12]
 800086a:	0a1b      	lsrs	r3, r3, #8
 800086c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000870:	693b      	ldr	r3, [r7, #16]
 8000872:	fb02 f303 	mul.w	r3, r2, r3
 8000876:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000878:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <SystemCoreClockUpdate+0x144>)
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	0e5b      	lsrs	r3, r3, #25
 800087e:	f003 0303 	and.w	r3, r3, #3
 8000882:	3301      	adds	r3, #1
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8000888:	693a      	ldr	r2, [r7, #16]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000890:	4a0f      	ldr	r2, [pc, #60]	; (80008d0 <SystemCoreClockUpdate+0x14c>)
 8000892:	6013      	str	r3, [r2, #0]
      break;
 8000894:	e003      	b.n	800089e <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8000896:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <SystemCoreClockUpdate+0x14c>)
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	6013      	str	r3, [r2, #0]
      break;
 800089c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800089e:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <SystemCoreClockUpdate+0x144>)
 80008a0:	689b      	ldr	r3, [r3, #8]
 80008a2:	091b      	lsrs	r3, r3, #4
 80008a4:	f003 030f 	and.w	r3, r3, #15
 80008a8:	4a0b      	ldr	r2, [pc, #44]	; (80008d8 <SystemCoreClockUpdate+0x154>)
 80008aa:	5cd3      	ldrb	r3, [r2, r3]
 80008ac:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <SystemCoreClockUpdate+0x14c>)
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	fa22 f303 	lsr.w	r3, r2, r3
 80008b8:	4a05      	ldr	r2, [pc, #20]	; (80008d0 <SystemCoreClockUpdate+0x14c>)
 80008ba:	6013      	str	r3, [r2, #0]
}
 80008bc:	bf00      	nop
 80008be:	371c      	adds	r7, #28
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	40021000 	.word	0x40021000
 80008cc:	080020d8 	.word	0x080020d8
 80008d0:	20000000 	.word	0x20000000
 80008d4:	00f42400 	.word	0x00f42400
 80008d8:	080020c8 	.word	0x080020c8

080008dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80008dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000914 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008e0:	f7ff ff3e 	bl	8000760 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80008e4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80008e6:	e003      	b.n	80008f0 <LoopCopyDataInit>

080008e8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80008e8:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80008ea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80008ec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80008ee:	3104      	adds	r1, #4

080008f0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80008f0:	480a      	ldr	r0, [pc, #40]	; (800091c <LoopForever+0xa>)
	ldr	r3, =_edata
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <LoopForever+0xe>)
	adds	r2, r0, r1
 80008f4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80008f6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80008f8:	d3f6      	bcc.n	80008e8 <CopyDataInit>
	ldr	r2, =_sbss
 80008fa:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <LoopForever+0x12>)
	b	LoopFillZerobss
 80008fc:	e002      	b.n	8000904 <LoopFillZerobss>

080008fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80008fe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000900:	f842 3b04 	str.w	r3, [r2], #4

08000904 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000904:	4b08      	ldr	r3, [pc, #32]	; (8000928 <LoopForever+0x16>)
	cmp	r2, r3
 8000906:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000908:	d3f9      	bcc.n	80008fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800090a:	f001 fba5 	bl	8002058 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800090e:	f7ff fd21 	bl	8000354 <main>

08000912 <LoopForever>:

LoopForever:
    b LoopForever
 8000912:	e7fe      	b.n	8000912 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000914:	20040000 	.word	0x20040000
	ldr	r3, =_sidata
 8000918:	08002120 	.word	0x08002120
	ldr	r0, =_sdata
 800091c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000920:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000924:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000928:	200000a4 	.word	0x200000a4

0800092c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800092c:	e7fe      	b.n	800092c <ADC1_2_IRQHandler>

0800092e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b082      	sub	sp, #8
 8000932:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000934:	2300      	movs	r3, #0
 8000936:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000938:	2004      	movs	r0, #4
 800093a:	f000 f945 	bl	8000bc8 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 800093e:	f7ff ff21 	bl	8000784 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000942:	2000      	movs	r0, #0
 8000944:	f000 f80e 	bl	8000964 <HAL_InitTick>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d002      	beq.n	8000954 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 800094e:	2301      	movs	r3, #1
 8000950:	71fb      	strb	r3, [r7, #7]
 8000952:	e001      	b.n	8000958 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000954:	f7ff feb6 	bl	80006c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000958:	79fb      	ldrb	r3, [r7, #7]
}
 800095a:	4618      	mov	r0, r3
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800096c:	2300      	movs	r3, #0
 800096e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000970:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <HAL_InitTick+0x6c>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d023      	beq.n	80009c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000978:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <HAL_InitTick+0x70>)
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <HAL_InitTick+0x6c>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	4619      	mov	r1, r3
 8000982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000986:	fbb3 f3f1 	udiv	r3, r3, r1
 800098a:	fbb2 f3f3 	udiv	r3, r2, r3
 800098e:	4618      	mov	r0, r3
 8000990:	f000 f93f 	bl	8000c12 <HAL_SYSTICK_Config>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d10f      	bne.n	80009ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2b07      	cmp	r3, #7
 800099e:	d809      	bhi.n	80009b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a0:	2200      	movs	r2, #0
 80009a2:	6879      	ldr	r1, [r7, #4]
 80009a4:	f04f 30ff 	mov.w	r0, #4294967295
 80009a8:	f000 f919 	bl	8000bde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009ac:	4a0a      	ldr	r2, [pc, #40]	; (80009d8 <HAL_InitTick+0x74>)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6013      	str	r3, [r2, #0]
 80009b2:	e007      	b.n	80009c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009b4:	2301      	movs	r3, #1
 80009b6:	73fb      	strb	r3, [r7, #15]
 80009b8:	e004      	b.n	80009c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
 80009bc:	73fb      	strb	r3, [r7, #15]
 80009be:	e001      	b.n	80009c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009c0:	2301      	movs	r3, #1
 80009c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000008 	.word	0x20000008
 80009d4:	20000000 	.word	0x20000000
 80009d8:	20000004 	.word	0x20000004

080009dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <HAL_IncTick+0x20>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	461a      	mov	r2, r3
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <HAL_IncTick+0x24>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4413      	add	r3, r2
 80009ec:	4a04      	ldr	r2, [pc, #16]	; (8000a00 <HAL_IncTick+0x24>)
 80009ee:	6013      	str	r3, [r2, #0]
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	20000008 	.word	0x20000008
 8000a00:	200000a0 	.word	0x200000a0

08000a04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  return uwTick;
 8000a08:	4b03      	ldr	r3, [pc, #12]	; (8000a18 <HAL_GetTick+0x14>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	200000a0 	.word	0x200000a0

08000a1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a24:	f7ff ffee 	bl	8000a04 <HAL_GetTick>
 8000a28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a34:	d005      	beq.n	8000a42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a36:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <HAL_Delay+0x44>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	4413      	add	r3, r2
 8000a40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a42:	bf00      	nop
 8000a44:	f7ff ffde 	bl	8000a04 <HAL_GetTick>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d8f7      	bhi.n	8000a44 <HAL_Delay+0x28>
  {
  }
}
 8000a54:	bf00      	nop
 8000a56:	bf00      	nop
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000008 	.word	0x20000008

08000a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f003 0307 	and.w	r3, r3, #7
 8000a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a7a:	68ba      	ldr	r2, [r7, #8]
 8000a7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a80:	4013      	ands	r3, r2
 8000a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a96:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	60d3      	str	r3, [r2, #12]
}
 8000a9c:	bf00      	nop
 8000a9e:	3714      	adds	r7, #20
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	0a1b      	lsrs	r3, r3, #8
 8000ab6:	f003 0307 	and.w	r3, r3, #7
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	6039      	str	r1, [r7, #0]
 8000ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	db0a      	blt.n	8000af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	490c      	ldr	r1, [pc, #48]	; (8000b14 <__NVIC_SetPriority+0x4c>)
 8000ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae6:	0152      	lsls	r2, r2, #5
 8000ae8:	b2d2      	uxtb	r2, r2
 8000aea:	440b      	add	r3, r1
 8000aec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000af0:	e00a      	b.n	8000b08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4908      	ldr	r1, [pc, #32]	; (8000b18 <__NVIC_SetPriority+0x50>)
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	f003 030f 	and.w	r3, r3, #15
 8000afe:	3b04      	subs	r3, #4
 8000b00:	0152      	lsls	r2, r2, #5
 8000b02:	b2d2      	uxtb	r2, r2
 8000b04:	440b      	add	r3, r1
 8000b06:	761a      	strb	r2, [r3, #24]
}
 8000b08:	bf00      	nop
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	e000e100 	.word	0xe000e100
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b089      	sub	sp, #36	; 0x24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	f003 0307 	and.w	r3, r3, #7
 8000b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b30:	69fb      	ldr	r3, [r7, #28]
 8000b32:	f1c3 0307 	rsb	r3, r3, #7
 8000b36:	2b03      	cmp	r3, #3
 8000b38:	bf28      	it	cs
 8000b3a:	2303      	movcs	r3, #3
 8000b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	3303      	adds	r3, #3
 8000b42:	2b06      	cmp	r3, #6
 8000b44:	d902      	bls.n	8000b4c <NVIC_EncodePriority+0x30>
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	3b04      	subs	r3, #4
 8000b4a:	e000      	b.n	8000b4e <NVIC_EncodePriority+0x32>
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b50:	f04f 32ff 	mov.w	r2, #4294967295
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	43da      	mvns	r2, r3
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	401a      	ands	r2, r3
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b64:	f04f 31ff 	mov.w	r1, #4294967295
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6e:	43d9      	mvns	r1, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b74:	4313      	orrs	r3, r2
         );
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3724      	adds	r7, #36	; 0x24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
	...

08000b84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b94:	d301      	bcc.n	8000b9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b96:	2301      	movs	r3, #1
 8000b98:	e00f      	b.n	8000bba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	; (8000bc4 <SysTick_Config+0x40>)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ba2:	2107      	movs	r1, #7
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba8:	f7ff ff8e 	bl	8000ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bac:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <SysTick_Config+0x40>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bb2:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <SysTick_Config+0x40>)
 8000bb4:	2207      	movs	r2, #7
 8000bb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	e000e010 	.word	0xe000e010

08000bc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f7ff ff47 	bl	8000a64 <__NVIC_SetPriorityGrouping>
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b086      	sub	sp, #24
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	4603      	mov	r3, r0
 8000be6:	60b9      	str	r1, [r7, #8]
 8000be8:	607a      	str	r2, [r7, #4]
 8000bea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bec:	f7ff ff5e 	bl	8000aac <__NVIC_GetPriorityGrouping>
 8000bf0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	68b9      	ldr	r1, [r7, #8]
 8000bf6:	6978      	ldr	r0, [r7, #20]
 8000bf8:	f7ff ff90 	bl	8000b1c <NVIC_EncodePriority>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c02:	4611      	mov	r1, r2
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff ff5f 	bl	8000ac8 <__NVIC_SetPriority>
}
 8000c0a:	bf00      	nop
 8000c0c:	3718      	adds	r7, #24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff ffb2 	bl	8000b84 <SysTick_Config>
 8000c20:	4603      	mov	r3, r0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b087      	sub	sp, #28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000c3a:	e158      	b.n	8000eee <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	2101      	movs	r1, #1
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	fa01 f303 	lsl.w	r3, r1, r3
 8000c48:	4013      	ands	r3, r2
 8000c4a:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	f000 814a 	beq.w	8000ee8 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d00b      	beq.n	8000c74 <HAL_GPIO_Init+0x48>
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d007      	beq.n	8000c74 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c68:	2b11      	cmp	r3, #17
 8000c6a:	d003      	beq.n	8000c74 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	2b12      	cmp	r3, #18
 8000c72:	d130      	bne.n	8000cd6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	2203      	movs	r2, #3
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	43db      	mvns	r3, r3
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	68da      	ldr	r2, [r3, #12]
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000caa:	2201      	movs	r2, #1
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	091b      	lsrs	r3, r3, #4
 8000cc0:	f003 0201 	and.w	r2, r3, #1
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	68db      	ldr	r3, [r3, #12]
 8000cda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	4013      	ands	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	689a      	ldr	r2, [r3, #8]
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d003      	beq.n	8000d16 <HAL_GPIO_Init+0xea>
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	2b12      	cmp	r3, #18
 8000d14:	d123      	bne.n	8000d5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	08da      	lsrs	r2, r3, #3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	3208      	adds	r2, #8
 8000d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d22:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	220f      	movs	r2, #15
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43db      	mvns	r3, r3
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	4013      	ands	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	691a      	ldr	r2, [r3, #16]
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	f003 0307 	and.w	r3, r3, #7
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	08da      	lsrs	r2, r3, #3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3208      	adds	r2, #8
 8000d58:	6939      	ldr	r1, [r7, #16]
 8000d5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	2203      	movs	r2, #3
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	4013      	ands	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 0203 	and.w	r2, r3, #3
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f000 80a4 	beq.w	8000ee8 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8000da0:	4a5a      	ldr	r2, [pc, #360]	; (8000f0c <HAL_GPIO_Init+0x2e0>)
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	089b      	lsrs	r3, r3, #2
 8000da6:	3318      	adds	r3, #24
 8000da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dac:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	f003 0303 	and.w	r3, r3, #3
 8000db4:	00db      	lsls	r3, r3, #3
 8000db6:	220f      	movs	r2, #15
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4a52      	ldr	r2, [pc, #328]	; (8000f10 <HAL_GPIO_Init+0x2e4>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d025      	beq.n	8000e18 <HAL_GPIO_Init+0x1ec>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4a51      	ldr	r2, [pc, #324]	; (8000f14 <HAL_GPIO_Init+0x2e8>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d01f      	beq.n	8000e14 <HAL_GPIO_Init+0x1e8>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4a50      	ldr	r2, [pc, #320]	; (8000f18 <HAL_GPIO_Init+0x2ec>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d019      	beq.n	8000e10 <HAL_GPIO_Init+0x1e4>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a4f      	ldr	r2, [pc, #316]	; (8000f1c <HAL_GPIO_Init+0x2f0>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d013      	beq.n	8000e0c <HAL_GPIO_Init+0x1e0>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a4e      	ldr	r2, [pc, #312]	; (8000f20 <HAL_GPIO_Init+0x2f4>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d00d      	beq.n	8000e08 <HAL_GPIO_Init+0x1dc>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a4d      	ldr	r2, [pc, #308]	; (8000f24 <HAL_GPIO_Init+0x2f8>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d007      	beq.n	8000e04 <HAL_GPIO_Init+0x1d8>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a4c      	ldr	r2, [pc, #304]	; (8000f28 <HAL_GPIO_Init+0x2fc>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d101      	bne.n	8000e00 <HAL_GPIO_Init+0x1d4>
 8000dfc:	2306      	movs	r3, #6
 8000dfe:	e00c      	b.n	8000e1a <HAL_GPIO_Init+0x1ee>
 8000e00:	2307      	movs	r3, #7
 8000e02:	e00a      	b.n	8000e1a <HAL_GPIO_Init+0x1ee>
 8000e04:	2305      	movs	r3, #5
 8000e06:	e008      	b.n	8000e1a <HAL_GPIO_Init+0x1ee>
 8000e08:	2304      	movs	r3, #4
 8000e0a:	e006      	b.n	8000e1a <HAL_GPIO_Init+0x1ee>
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	e004      	b.n	8000e1a <HAL_GPIO_Init+0x1ee>
 8000e10:	2302      	movs	r3, #2
 8000e12:	e002      	b.n	8000e1a <HAL_GPIO_Init+0x1ee>
 8000e14:	2301      	movs	r3, #1
 8000e16:	e000      	b.n	8000e1a <HAL_GPIO_Init+0x1ee>
 8000e18:	2300      	movs	r3, #0
 8000e1a:	697a      	ldr	r2, [r7, #20]
 8000e1c:	f002 0203 	and.w	r2, r2, #3
 8000e20:	00d2      	lsls	r2, r2, #3
 8000e22:	4093      	lsls	r3, r2
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8000e2a:	4938      	ldr	r1, [pc, #224]	; (8000f0c <HAL_GPIO_Init+0x2e0>)
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	089b      	lsrs	r3, r3, #2
 8000e30:	3318      	adds	r3, #24
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e38:	4b34      	ldr	r3, [pc, #208]	; (8000f0c <HAL_GPIO_Init+0x2e0>)
 8000e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	43db      	mvns	r3, r3
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	4013      	ands	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d003      	beq.n	8000e5e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e5e:	4a2b      	ldr	r2, [pc, #172]	; (8000f0c <HAL_GPIO_Init+0x2e0>)
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000e66:	4b29      	ldr	r3, [pc, #164]	; (8000f0c <HAL_GPIO_Init+0x2e0>)
 8000e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	43db      	mvns	r3, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d003      	beq.n	8000e8c <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e8c:	4a1f      	ldr	r2, [pc, #124]	; (8000f0c <HAL_GPIO_Init+0x2e0>)
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e94:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <HAL_GPIO_Init+0x2e0>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d003      	beq.n	8000eb8 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000eb8:	4a14      	ldr	r2, [pc, #80]	; (8000f0c <HAL_GPIO_Init+0x2e0>)
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000ebe:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <HAL_GPIO_Init+0x2e0>)
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d003      	beq.n	8000ee2 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <HAL_GPIO_Init+0x2e0>)
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	3301      	adds	r3, #1
 8000eec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f47f ae9f 	bne.w	8000c3c <HAL_GPIO_Init+0x10>
  }
}
 8000efe:	bf00      	nop
 8000f00:	bf00      	nop
 8000f02:	371c      	adds	r7, #28
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	4002f400 	.word	0x4002f400
 8000f10:	42020000 	.word	0x42020000
 8000f14:	42020400 	.word	0x42020400
 8000f18:	42020800 	.word	0x42020800
 8000f1c:	42020c00 	.word	0x42020c00
 8000f20:	42021000 	.word	0x42021000
 8000f24:	42021400 	.word	0x42021400
 8000f28:	42021800 	.word	0x42021800

08000f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	460b      	mov	r3, r1
 8000f36:	807b      	strh	r3, [r7, #2]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f3c:	787b      	ldrb	r3, [r7, #1]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d003      	beq.n	8000f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f42:	887a      	ldrh	r2, [r7, #2]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f48:	e002      	b.n	8000f50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f4a:	887a      	ldrh	r2, [r7, #2]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	695b      	ldr	r3, [r3, #20]
 8000f6c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f6e:	887a      	ldrh	r2, [r7, #2]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4013      	ands	r3, r2
 8000f74:	041a      	lsls	r2, r3, #16
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	43d9      	mvns	r1, r3
 8000f7a:	887b      	ldrh	r3, [r7, #2]
 8000f7c:	400b      	ands	r3, r1
 8000f7e:	431a      	orrs	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	619a      	str	r2, [r3, #24]
}
 8000f84:	bf00      	nop
 8000f86:	3714      	adds	r7, #20
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d002      	beq.n	8000fae <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	73fb      	strb	r3, [r7, #15]
 8000fac:	e007      	b.n	8000fbe <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8000fae:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f023 0204 	bic.w	r2, r3, #4
 8000fb6:	4905      	ldr	r1, [pc, #20]	; (8000fcc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	600b      	str	r3, [r1, #0]
  }

  return status;
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	40030400 	.word	0x40030400

08000fd0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <HAL_ICACHE_Enable+0x1c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a04      	ldr	r2, [pc, #16]	; (8000fec <HAL_ICACHE_Enable+0x1c>)
 8000fda:	f043 0301 	orr.w	r3, r3, #1
 8000fde:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	40030400 	.word	0x40030400

08000ff0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000ff4:	4b04      	ldr	r3, [pc, #16]	; (8001008 <HAL_PWREx_GetVoltageRange+0x18>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	40007000 	.word	0x40007000

0800100c <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8001014:	4b27      	ldr	r3, [pc, #156]	; (80010b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800101c:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 800101e:	f000 f861 	bl	80010e4 <HAL_PWREx_SMPS_GetEffectiveMode>
 8001022:	4603      	mov	r3, r0
 8001024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001028:	d101      	bne.n	800102e <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e03e      	b.n	80010ac <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 800102e:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001036:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800103a:	d101      	bne.n	8001040 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e035      	b.n	80010ac <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001040:	68ba      	ldr	r2, [r7, #8]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	429a      	cmp	r2, r3
 8001046:	d101      	bne.n	800104c <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8001048:	2300      	movs	r3, #0
 800104a:	e02f      	b.n	80010ac <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800104c:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8001054:	4917      	ldr	r1, [pc, #92]	; (80010b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4313      	orrs	r3, r2
 800105a:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 800105c:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <HAL_PWREx_ControlVoltageScaling+0xac>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	095b      	lsrs	r3, r3, #5
 8001062:	4a16      	ldr	r2, [pc, #88]	; (80010bc <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001064:	fba2 2303 	umull	r2, r3, r2, r3
 8001068:	09db      	lsrs	r3, r3, #7
 800106a:	2232      	movs	r2, #50	; 0x32
 800106c:	fb02 f303 	mul.w	r3, r2, r3
 8001070:	4a13      	ldr	r2, [pc, #76]	; (80010c0 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8001072:	fba2 2303 	umull	r2, r3, r2, r3
 8001076:	08db      	lsrs	r3, r3, #3
 8001078:	3301      	adds	r3, #1
 800107a:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800107c:	e002      	b.n	8001084 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	3b01      	subs	r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001084:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001086:	695b      	ldr	r3, [r3, #20]
 8001088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800108c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001090:	d102      	bne.n	8001098 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1f2      	bne.n	800107e <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800109a:	695b      	ldr	r3, [r3, #20]
 800109c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010a4:	d101      	bne.n	80010aa <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e000      	b.n	80010ac <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40007000 	.word	0x40007000
 80010b8:	20000000 	.word	0x20000000
 80010bc:	0a7c5ac5 	.word	0x0a7c5ac5
 80010c0:	cccccccd 	.word	0xcccccccd

080010c4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80010c8:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80010ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d2:	6093      	str	r3, [r2, #8]
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	40007000 	.word	0x40007000

080010e4 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80010ea:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 80010fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	e00a      	b.n	8001118 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d103      	bne.n	8001114 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 800110c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	e001      	b.n	8001118 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8001114:	2300      	movs	r3, #0
 8001116:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8001118:	687b      	ldr	r3, [r7, #4]
}
 800111a:	4618      	mov	r0, r3
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	40007000 	.word	0x40007000

0800112c <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d102      	bne.n	8001140 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	f000 bcd0 	b.w	8001ae0 <HAL_RCC_OscConfig+0x9b4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001140:	4ba3      	ldr	r3, [pc, #652]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	f003 030c 	and.w	r3, r3, #12
 8001148:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800114a:	4ba1      	ldr	r3, [pc, #644]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	f003 0303 	and.w	r3, r3, #3
 8001152:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0310 	and.w	r3, r3, #16
 800115c:	2b00      	cmp	r3, #0
 800115e:	f000 80e9 	beq.w	8001334 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d006      	beq.n	8001176 <HAL_RCC_OscConfig+0x4a>
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	2b0c      	cmp	r3, #12
 800116c:	f040 8083 	bne.w	8001276 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d17f      	bne.n	8001276 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001176:	4b96      	ldr	r3, [pc, #600]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d006      	beq.n	8001190 <HAL_RCC_OscConfig+0x64>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d102      	bne.n	8001190 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	f000 bca8 	b.w	8001ae0 <HAL_RCC_OscConfig+0x9b4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001194:	4b8e      	ldr	r3, [pc, #568]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0308 	and.w	r3, r3, #8
 800119c:	2b00      	cmp	r3, #0
 800119e:	d004      	beq.n	80011aa <HAL_RCC_OscConfig+0x7e>
 80011a0:	4b8b      	ldr	r3, [pc, #556]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011a8:	e005      	b.n	80011b6 <HAL_RCC_OscConfig+0x8a>
 80011aa:	4b89      	ldr	r3, [pc, #548]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 80011ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011b0:	091b      	lsrs	r3, r3, #4
 80011b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d224      	bcs.n	8001204 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 fe6e 	bl	8001ea0 <RCC_SetFlashLatencyFromMSIRange>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d002      	beq.n	80011d0 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	f000 bc88 	b.w	8001ae0 <HAL_RCC_OscConfig+0x9b4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011d0:	4b7f      	ldr	r3, [pc, #508]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a7e      	ldr	r2, [pc, #504]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 80011d6:	f043 0308 	orr.w	r3, r3, #8
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	4b7c      	ldr	r3, [pc, #496]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e8:	4979      	ldr	r1, [pc, #484]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 80011ea:	4313      	orrs	r3, r2
 80011ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011ee:	4b78      	ldr	r3, [pc, #480]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a1b      	ldr	r3, [r3, #32]
 80011fa:	021b      	lsls	r3, r3, #8
 80011fc:	4974      	ldr	r1, [pc, #464]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 80011fe:	4313      	orrs	r3, r2
 8001200:	604b      	str	r3, [r1, #4]
 8001202:	e026      	b.n	8001252 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001204:	4b72      	ldr	r3, [pc, #456]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a71      	ldr	r2, [pc, #452]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 800120a:	f043 0308 	orr.w	r3, r3, #8
 800120e:	6013      	str	r3, [r2, #0]
 8001210:	4b6f      	ldr	r3, [pc, #444]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121c:	496c      	ldr	r1, [pc, #432]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 800121e:	4313      	orrs	r3, r2
 8001220:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001222:	4b6b      	ldr	r3, [pc, #428]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a1b      	ldr	r3, [r3, #32]
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	4967      	ldr	r1, [pc, #412]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 8001232:	4313      	orrs	r3, r2
 8001234:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d10a      	bne.n	8001252 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001240:	4618      	mov	r0, r3
 8001242:	f000 fe2d 	bl	8001ea0 <RCC_SetFlashLatencyFromMSIRange>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d002      	beq.n	8001252 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	f000 bc47 	b.w	8001ae0 <HAL_RCC_OscConfig+0x9b4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001252:	f000 fe11 	bl	8001e78 <HAL_RCC_GetHCLKFreq>
 8001256:	4603      	mov	r3, r0
 8001258:	4a5e      	ldr	r2, [pc, #376]	; (80013d4 <HAL_RCC_OscConfig+0x2a8>)
 800125a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800125c:	4b5e      	ldr	r3, [pc, #376]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fb7f 	bl	8000964 <HAL_InitTick>
 8001266:	4603      	mov	r3, r0
 8001268:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d060      	beq.n	8001332 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8001270:	7bfb      	ldrb	r3, [r7, #15]
 8001272:	f000 bc35 	b.w	8001ae0 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d039      	beq.n	80012f2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800127e:	4b54      	ldr	r3, [pc, #336]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a53      	ldr	r2, [pc, #332]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800128a:	f7ff fbbb 	bl	8000a04 <HAL_GetTick>
 800128e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001290:	e00f      	b.n	80012b2 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001292:	f7ff fbb7 	bl	8000a04 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b02      	cmp	r3, #2
 800129e:	d908      	bls.n	80012b2 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012a0:	4b4b      	ldr	r3, [pc, #300]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d102      	bne.n	80012b2 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	f000 bc17 	b.w	8001ae0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012b2:	4b47      	ldr	r3, [pc, #284]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d0e9      	beq.n	8001292 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012be:	4b44      	ldr	r3, [pc, #272]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a43      	ldr	r2, [pc, #268]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 80012c4:	f043 0308 	orr.w	r3, r3, #8
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	4b41      	ldr	r3, [pc, #260]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d6:	493e      	ldr	r1, [pc, #248]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 80012d8:	4313      	orrs	r3, r2
 80012da:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012dc:	4b3c      	ldr	r3, [pc, #240]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a1b      	ldr	r3, [r3, #32]
 80012e8:	021b      	lsls	r3, r3, #8
 80012ea:	4939      	ldr	r1, [pc, #228]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 80012ec:	4313      	orrs	r3, r2
 80012ee:	604b      	str	r3, [r1, #4]
 80012f0:	e020      	b.n	8001334 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80012f2:	4b37      	ldr	r3, [pc, #220]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a36      	ldr	r2, [pc, #216]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 80012f8:	f023 0301 	bic.w	r3, r3, #1
 80012fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012fe:	f7ff fb81 	bl	8000a04 <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001304:	e00e      	b.n	8001324 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001306:	f7ff fb7d 	bl	8000a04 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d907      	bls.n	8001324 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001314:	4b2e      	ldr	r3, [pc, #184]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e3dd      	b.n	8001ae0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001324:	4b2a      	ldr	r3, [pc, #168]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1ea      	bne.n	8001306 <HAL_RCC_OscConfig+0x1da>
 8001330:	e000      	b.n	8001334 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001332:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	2b00      	cmp	r3, #0
 800133e:	d07e      	beq.n	800143e <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	2b08      	cmp	r3, #8
 8001344:	d005      	beq.n	8001352 <HAL_RCC_OscConfig+0x226>
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	2b0c      	cmp	r3, #12
 800134a:	d10e      	bne.n	800136a <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	2b03      	cmp	r3, #3
 8001350:	d10b      	bne.n	800136a <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001352:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d06e      	beq.n	800143c <HAL_RCC_OscConfig+0x310>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d16a      	bne.n	800143c <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e3ba      	b.n	8001ae0 <HAL_RCC_OscConfig+0x9b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001372:	d106      	bne.n	8001382 <HAL_RCC_OscConfig+0x256>
 8001374:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a15      	ldr	r2, [pc, #84]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 800137a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	e01d      	b.n	80013be <HAL_RCC_OscConfig+0x292>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800138a:	d10c      	bne.n	80013a6 <HAL_RCC_OscConfig+0x27a>
 800138c:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a0f      	ldr	r2, [pc, #60]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 8001392:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a0c      	ldr	r2, [pc, #48]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 800139e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013a2:	6013      	str	r3, [r2, #0]
 80013a4:	e00b      	b.n	80013be <HAL_RCC_OscConfig+0x292>
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a09      	ldr	r2, [pc, #36]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 80013ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a06      	ldr	r2, [pc, #24]	; (80013d0 <HAL_RCC_OscConfig+0x2a4>)
 80013b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013bc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d020      	beq.n	8001408 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c6:	f7ff fb1d 	bl	8000a04 <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013cc:	e015      	b.n	80013fa <HAL_RCC_OscConfig+0x2ce>
 80013ce:	bf00      	nop
 80013d0:	40021000 	.word	0x40021000
 80013d4:	20000000 	.word	0x20000000
 80013d8:	20000004 	.word	0x20000004
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013dc:	f7ff fb12 	bl	8000a04 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b64      	cmp	r3, #100	; 0x64
 80013e8:	d907      	bls.n	80013fa <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013ea:	4b9f      	ldr	r3, [pc, #636]	; (8001668 <HAL_RCC_OscConfig+0x53c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d101      	bne.n	80013fa <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e372      	b.n	8001ae0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013fa:	4b9b      	ldr	r3, [pc, #620]	; (8001668 <HAL_RCC_OscConfig+0x53c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0ea      	beq.n	80013dc <HAL_RCC_OscConfig+0x2b0>
 8001406:	e01a      	b.n	800143e <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001408:	f7ff fafc 	bl	8000a04 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800140e:	e00e      	b.n	800142e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001410:	f7ff faf8 	bl	8000a04 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b64      	cmp	r3, #100	; 0x64
 800141c:	d907      	bls.n	800142e <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800141e:	4b92      	ldr	r3, [pc, #584]	; (8001668 <HAL_RCC_OscConfig+0x53c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e358      	b.n	8001ae0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800142e:	4b8e      	ldr	r3, [pc, #568]	; (8001668 <HAL_RCC_OscConfig+0x53c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1ea      	bne.n	8001410 <HAL_RCC_OscConfig+0x2e4>
 800143a:	e000      	b.n	800143e <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800143c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d06c      	beq.n	8001524 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	2b04      	cmp	r3, #4
 800144e:	d005      	beq.n	800145c <HAL_RCC_OscConfig+0x330>
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	2b0c      	cmp	r3, #12
 8001454:	d119      	bne.n	800148a <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	2b02      	cmp	r3, #2
 800145a:	d116      	bne.n	800148a <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800145c:	4b82      	ldr	r3, [pc, #520]	; (8001668 <HAL_RCC_OscConfig+0x53c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001464:	2b00      	cmp	r3, #0
 8001466:	d005      	beq.n	8001474 <HAL_RCC_OscConfig+0x348>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d101      	bne.n	8001474 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e335      	b.n	8001ae0 <HAL_RCC_OscConfig+0x9b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001474:	4b7c      	ldr	r3, [pc, #496]	; (8001668 <HAL_RCC_OscConfig+0x53c>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	061b      	lsls	r3, r3, #24
 8001482:	4979      	ldr	r1, [pc, #484]	; (8001668 <HAL_RCC_OscConfig+0x53c>)
 8001484:	4313      	orrs	r3, r2
 8001486:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001488:	e04c      	b.n	8001524 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d029      	beq.n	80014e6 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001492:	4b75      	ldr	r3, [pc, #468]	; (8001668 <HAL_RCC_OscConfig+0x53c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a74      	ldr	r2, [pc, #464]	; (8001668 <HAL_RCC_OscConfig+0x53c>)
 8001498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800149c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149e:	f7ff fab1 	bl	8000a04 <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014a4:	e00e      	b.n	80014c4 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014a6:	f7ff faad 	bl	8000a04 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d907      	bls.n	80014c4 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014b4:	4b6c      	ldr	r3, [pc, #432]	; (8001668 <HAL_RCC_OscConfig+0x53c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d101      	bne.n	80014c4 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e30d      	b.n	8001ae0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014c4:	4b68      	ldr	r3, [pc, #416]	; (8001668 <HAL_RCC_OscConfig+0x53c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0ea      	beq.n	80014a6 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d0:	4b65      	ldr	r3, [pc, #404]	; (8001668 <HAL_RCC_OscConfig+0x53c>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	061b      	lsls	r3, r3, #24
 80014de:	4962      	ldr	r1, [pc, #392]	; (8001668 <HAL_RCC_OscConfig+0x53c>)
 80014e0:	4313      	orrs	r3, r2
 80014e2:	604b      	str	r3, [r1, #4]
 80014e4:	e01e      	b.n	8001524 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014e6:	4b60      	ldr	r3, [pc, #384]	; (8001668 <HAL_RCC_OscConfig+0x53c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a5f      	ldr	r2, [pc, #380]	; (8001668 <HAL_RCC_OscConfig+0x53c>)
 80014ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f2:	f7ff fa87 	bl	8000a04 <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014f8:	e00e      	b.n	8001518 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014fa:	f7ff fa83 	bl	8000a04 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d907      	bls.n	8001518 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001508:	4b57      	ldr	r3, [pc, #348]	; (8001668 <HAL_RCC_OscConfig+0x53c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e2e3      	b.n	8001ae0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001518:	4b53      	ldr	r3, [pc, #332]	; (8001668 <HAL_RCC_OscConfig+0x53c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1ea      	bne.n	80014fa <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0308 	and.w	r3, r3, #8
 800152c:	2b00      	cmp	r3, #0
 800152e:	d05f      	beq.n	80015f0 <HAL_RCC_OscConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	695b      	ldr	r3, [r3, #20]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d038      	beq.n	80015aa <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d108      	bne.n	8001552 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8001540:	4b49      	ldr	r3, [pc, #292]	; (8001668 <HAL_RCC_OscConfig+0x53c>)
 8001542:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001546:	4a48      	ldr	r2, [pc, #288]	; (8001668 <HAL_RCC_OscConfig+0x53c>)
 8001548:	f023 0310 	bic.w	r3, r3, #16
 800154c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001550:	e007      	b.n	8001562 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8001552:	4b45      	ldr	r3, [pc, #276]	; (8001668 <HAL_RCC_OscConfig+0x53c>)
 8001554:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001558:	4a43      	ldr	r2, [pc, #268]	; (8001668 <HAL_RCC_OscConfig+0x53c>)
 800155a:	f043 0310 	orr.w	r3, r3, #16
 800155e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001562:	4b41      	ldr	r3, [pc, #260]	; (8001668 <HAL_RCC_OscConfig+0x53c>)
 8001564:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001568:	4a3f      	ldr	r2, [pc, #252]	; (8001668 <HAL_RCC_OscConfig+0x53c>)
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001572:	f7ff fa47 	bl	8000a04 <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001578:	e00f      	b.n	800159a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800157a:	f7ff fa43 	bl	8000a04 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b07      	cmp	r3, #7
 8001586:	d908      	bls.n	800159a <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001588:	4b37      	ldr	r3, [pc, #220]	; (8001668 <HAL_RCC_OscConfig+0x53c>)
 800158a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e2a2      	b.n	8001ae0 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800159a:	4b33      	ldr	r3, [pc, #204]	; (8001668 <HAL_RCC_OscConfig+0x53c>)
 800159c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0e8      	beq.n	800157a <HAL_RCC_OscConfig+0x44e>
 80015a8:	e022      	b.n	80015f0 <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015aa:	4b2f      	ldr	r3, [pc, #188]	; (8001668 <HAL_RCC_OscConfig+0x53c>)
 80015ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015b0:	4a2d      	ldr	r2, [pc, #180]	; (8001668 <HAL_RCC_OscConfig+0x53c>)
 80015b2:	f023 0301 	bic.w	r3, r3, #1
 80015b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ba:	f7ff fa23 	bl	8000a04 <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015c0:	e00f      	b.n	80015e2 <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015c2:	f7ff fa1f 	bl	8000a04 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b07      	cmp	r3, #7
 80015ce:	d908      	bls.n	80015e2 <HAL_RCC_OscConfig+0x4b6>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015d0:	4b25      	ldr	r3, [pc, #148]	; (8001668 <HAL_RCC_OscConfig+0x53c>)
 80015d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_RCC_OscConfig+0x4b6>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e27e      	b.n	8001ae0 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015e2:	4b21      	ldr	r3, [pc, #132]	; (8001668 <HAL_RCC_OscConfig+0x53c>)
 80015e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1e8      	bne.n	80015c2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f000 8131 	beq.w	8001860 <HAL_RCC_OscConfig+0x734>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015fe:	2300      	movs	r3, #0
 8001600:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001602:	4b19      	ldr	r3, [pc, #100]	; (8001668 <HAL_RCC_OscConfig+0x53c>)
 8001604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d10d      	bne.n	800162a <HAL_RCC_OscConfig+0x4fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800160e:	4b16      	ldr	r3, [pc, #88]	; (8001668 <HAL_RCC_OscConfig+0x53c>)
 8001610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001612:	4a15      	ldr	r2, [pc, #84]	; (8001668 <HAL_RCC_OscConfig+0x53c>)
 8001614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001618:	6593      	str	r3, [r2, #88]	; 0x58
 800161a:	4b13      	ldr	r3, [pc, #76]	; (8001668 <HAL_RCC_OscConfig+0x53c>)
 800161c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001626:	2301      	movs	r3, #1
 8001628:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <HAL_RCC_OscConfig+0x540>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001632:	2b00      	cmp	r3, #0
 8001634:	d122      	bne.n	800167c <HAL_RCC_OscConfig+0x550>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001636:	4b0d      	ldr	r3, [pc, #52]	; (800166c <HAL_RCC_OscConfig+0x540>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a0c      	ldr	r2, [pc, #48]	; (800166c <HAL_RCC_OscConfig+0x540>)
 800163c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001640:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001642:	f7ff f9df 	bl	8000a04 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001648:	e012      	b.n	8001670 <HAL_RCC_OscConfig+0x544>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800164a:	f7ff f9db 	bl	8000a04 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d90b      	bls.n	8001670 <HAL_RCC_OscConfig+0x544>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001658:	4b04      	ldr	r3, [pc, #16]	; (800166c <HAL_RCC_OscConfig+0x540>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001660:	2b00      	cmp	r3, #0
 8001662:	d105      	bne.n	8001670 <HAL_RCC_OscConfig+0x544>
          {
            return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e23b      	b.n	8001ae0 <HAL_RCC_OscConfig+0x9b4>
 8001668:	40021000 	.word	0x40021000
 800166c:	40007000 	.word	0x40007000
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001670:	4bb8      	ldr	r3, [pc, #736]	; (8001954 <HAL_RCC_OscConfig+0x828>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0e6      	beq.n	800164a <HAL_RCC_OscConfig+0x51e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	2b00      	cmp	r3, #0
 8001686:	d01f      	beq.n	80016c8 <HAL_RCC_OscConfig+0x59c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b00      	cmp	r3, #0
 8001692:	d010      	beq.n	80016b6 <HAL_RCC_OscConfig+0x58a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001694:	4bb0      	ldr	r3, [pc, #704]	; (8001958 <HAL_RCC_OscConfig+0x82c>)
 8001696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800169a:	4aaf      	ldr	r2, [pc, #700]	; (8001958 <HAL_RCC_OscConfig+0x82c>)
 800169c:	f043 0304 	orr.w	r3, r3, #4
 80016a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80016a4:	4bac      	ldr	r3, [pc, #688]	; (8001958 <HAL_RCC_OscConfig+0x82c>)
 80016a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016aa:	4aab      	ldr	r2, [pc, #684]	; (8001958 <HAL_RCC_OscConfig+0x82c>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016b4:	e018      	b.n	80016e8 <HAL_RCC_OscConfig+0x5bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80016b6:	4ba8      	ldr	r3, [pc, #672]	; (8001958 <HAL_RCC_OscConfig+0x82c>)
 80016b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016bc:	4aa6      	ldr	r2, [pc, #664]	; (8001958 <HAL_RCC_OscConfig+0x82c>)
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016c6:	e00f      	b.n	80016e8 <HAL_RCC_OscConfig+0x5bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80016c8:	4ba3      	ldr	r3, [pc, #652]	; (8001958 <HAL_RCC_OscConfig+0x82c>)
 80016ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ce:	4aa2      	ldr	r2, [pc, #648]	; (8001958 <HAL_RCC_OscConfig+0x82c>)
 80016d0:	f023 0301 	bic.w	r3, r3, #1
 80016d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80016d8:	4b9f      	ldr	r3, [pc, #636]	; (8001958 <HAL_RCC_OscConfig+0x82c>)
 80016da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016de:	4a9e      	ldr	r2, [pc, #632]	; (8001958 <HAL_RCC_OscConfig+0x82c>)
 80016e0:	f023 0304 	bic.w	r3, r3, #4
 80016e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d068      	beq.n	80017c2 <HAL_RCC_OscConfig+0x696>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f0:	f7ff f988 	bl	8000a04 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016f6:	e011      	b.n	800171c <HAL_RCC_OscConfig+0x5f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016f8:	f7ff f984 	bl	8000a04 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	f241 3288 	movw	r2, #5000	; 0x1388
 8001706:	4293      	cmp	r3, r2
 8001708:	d908      	bls.n	800171c <HAL_RCC_OscConfig+0x5f0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800170a:	4b93      	ldr	r3, [pc, #588]	; (8001958 <HAL_RCC_OscConfig+0x82c>)
 800170c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d101      	bne.n	800171c <HAL_RCC_OscConfig+0x5f0>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e1e1      	b.n	8001ae0 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800171c:	4b8e      	ldr	r3, [pc, #568]	; (8001958 <HAL_RCC_OscConfig+0x82c>)
 800171e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0e6      	beq.n	80016f8 <HAL_RCC_OscConfig+0x5cc>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001732:	2b00      	cmp	r3, #0
 8001734:	d022      	beq.n	800177c <HAL_RCC_OscConfig+0x650>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001736:	4b88      	ldr	r3, [pc, #544]	; (8001958 <HAL_RCC_OscConfig+0x82c>)
 8001738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800173c:	4a86      	ldr	r2, [pc, #536]	; (8001958 <HAL_RCC_OscConfig+0x82c>)
 800173e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001742:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001746:	e011      	b.n	800176c <HAL_RCC_OscConfig+0x640>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001748:	f7ff f95c 	bl	8000a04 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	f241 3288 	movw	r2, #5000	; 0x1388
 8001756:	4293      	cmp	r3, r2
 8001758:	d908      	bls.n	800176c <HAL_RCC_OscConfig+0x640>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800175a:	4b7f      	ldr	r3, [pc, #508]	; (8001958 <HAL_RCC_OscConfig+0x82c>)
 800175c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001764:	2b00      	cmp	r3, #0
 8001766:	d101      	bne.n	800176c <HAL_RCC_OscConfig+0x640>
            {
              return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e1b9      	b.n	8001ae0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800176c:	4b7a      	ldr	r3, [pc, #488]	; (8001958 <HAL_RCC_OscConfig+0x82c>)
 800176e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001772:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001776:	2b00      	cmp	r3, #0
 8001778:	d0e6      	beq.n	8001748 <HAL_RCC_OscConfig+0x61c>
 800177a:	e068      	b.n	800184e <HAL_RCC_OscConfig+0x722>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800177c:	4b76      	ldr	r3, [pc, #472]	; (8001958 <HAL_RCC_OscConfig+0x82c>)
 800177e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001782:	4a75      	ldr	r2, [pc, #468]	; (8001958 <HAL_RCC_OscConfig+0x82c>)
 8001784:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800178c:	e011      	b.n	80017b2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800178e:	f7ff f939 	bl	8000a04 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	f241 3288 	movw	r2, #5000	; 0x1388
 800179c:	4293      	cmp	r3, r2
 800179e:	d908      	bls.n	80017b2 <HAL_RCC_OscConfig+0x686>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80017a0:	4b6d      	ldr	r3, [pc, #436]	; (8001958 <HAL_RCC_OscConfig+0x82c>)
 80017a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <HAL_RCC_OscConfig+0x686>
            {
              return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e196      	b.n	8001ae0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80017b2:	4b69      	ldr	r3, [pc, #420]	; (8001958 <HAL_RCC_OscConfig+0x82c>)
 80017b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1e6      	bne.n	800178e <HAL_RCC_OscConfig+0x662>
 80017c0:	e045      	b.n	800184e <HAL_RCC_OscConfig+0x722>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c2:	f7ff f91f 	bl	8000a04 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017c8:	e011      	b.n	80017ee <HAL_RCC_OscConfig+0x6c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ca:	f7ff f91b 	bl	8000a04 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d8:	4293      	cmp	r3, r2
 80017da:	d908      	bls.n	80017ee <HAL_RCC_OscConfig+0x6c2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017dc:	4b5e      	ldr	r3, [pc, #376]	; (8001958 <HAL_RCC_OscConfig+0x82c>)
 80017de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <HAL_RCC_OscConfig+0x6c2>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e178      	b.n	8001ae0 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017ee:	4b5a      	ldr	r3, [pc, #360]	; (8001958 <HAL_RCC_OscConfig+0x82c>)
 80017f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1e6      	bne.n	80017ca <HAL_RCC_OscConfig+0x69e>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80017fc:	4b56      	ldr	r3, [pc, #344]	; (8001958 <HAL_RCC_OscConfig+0x82c>)
 80017fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001806:	2b00      	cmp	r3, #0
 8001808:	d021      	beq.n	800184e <HAL_RCC_OscConfig+0x722>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800180a:	4b53      	ldr	r3, [pc, #332]	; (8001958 <HAL_RCC_OscConfig+0x82c>)
 800180c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001810:	4a51      	ldr	r2, [pc, #324]	; (8001958 <HAL_RCC_OscConfig+0x82c>)
 8001812:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001816:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800181a:	e011      	b.n	8001840 <HAL_RCC_OscConfig+0x714>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800181c:	f7ff f8f2 	bl	8000a04 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	f241 3288 	movw	r2, #5000	; 0x1388
 800182a:	4293      	cmp	r3, r2
 800182c:	d908      	bls.n	8001840 <HAL_RCC_OscConfig+0x714>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800182e:	4b4a      	ldr	r3, [pc, #296]	; (8001958 <HAL_RCC_OscConfig+0x82c>)
 8001830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001834:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <HAL_RCC_OscConfig+0x714>
            {
              return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e14f      	b.n	8001ae0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001840:	4b45      	ldr	r3, [pc, #276]	; (8001958 <HAL_RCC_OscConfig+0x82c>)
 8001842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001846:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1e6      	bne.n	800181c <HAL_RCC_OscConfig+0x6f0>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800184e:	7ffb      	ldrb	r3, [r7, #31]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d105      	bne.n	8001860 <HAL_RCC_OscConfig+0x734>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001854:	4b40      	ldr	r3, [pc, #256]	; (8001958 <HAL_RCC_OscConfig+0x82c>)
 8001856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001858:	4a3f      	ldr	r2, [pc, #252]	; (8001958 <HAL_RCC_OscConfig+0x82c>)
 800185a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800185e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0320 	and.w	r3, r3, #32
 8001868:	2b00      	cmp	r3, #0
 800186a:	d04a      	beq.n	8001902 <HAL_RCC_OscConfig+0x7d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001870:	2b00      	cmp	r3, #0
 8001872:	d023      	beq.n	80018bc <HAL_RCC_OscConfig+0x790>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001874:	4b38      	ldr	r3, [pc, #224]	; (8001958 <HAL_RCC_OscConfig+0x82c>)
 8001876:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800187a:	4a37      	ldr	r2, [pc, #220]	; (8001958 <HAL_RCC_OscConfig+0x82c>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001884:	f7ff f8be 	bl	8000a04 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800188a:	e00f      	b.n	80018ac <HAL_RCC_OscConfig+0x780>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800188c:	f7ff f8ba 	bl	8000a04 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d908      	bls.n	80018ac <HAL_RCC_OscConfig+0x780>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800189a:	4b2f      	ldr	r3, [pc, #188]	; (8001958 <HAL_RCC_OscConfig+0x82c>)
 800189c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d101      	bne.n	80018ac <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e119      	b.n	8001ae0 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018ac:	4b2a      	ldr	r3, [pc, #168]	; (8001958 <HAL_RCC_OscConfig+0x82c>)
 80018ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d0e8      	beq.n	800188c <HAL_RCC_OscConfig+0x760>
 80018ba:	e022      	b.n	8001902 <HAL_RCC_OscConfig+0x7d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018bc:	4b26      	ldr	r3, [pc, #152]	; (8001958 <HAL_RCC_OscConfig+0x82c>)
 80018be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018c2:	4a25      	ldr	r2, [pc, #148]	; (8001958 <HAL_RCC_OscConfig+0x82c>)
 80018c4:	f023 0301 	bic.w	r3, r3, #1
 80018c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018cc:	f7ff f89a 	bl	8000a04 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018d2:	e00f      	b.n	80018f4 <HAL_RCC_OscConfig+0x7c8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018d4:	f7ff f896 	bl	8000a04 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d908      	bls.n	80018f4 <HAL_RCC_OscConfig+0x7c8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018e2:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <HAL_RCC_OscConfig+0x82c>)
 80018e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <HAL_RCC_OscConfig+0x7c8>
          {
            return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e0f5      	b.n	8001ae0 <HAL_RCC_OscConfig+0x9b4>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018f4:	4b18      	ldr	r3, [pc, #96]	; (8001958 <HAL_RCC_OscConfig+0x82c>)
 80018f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1e8      	bne.n	80018d4 <HAL_RCC_OscConfig+0x7a8>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001906:	2b00      	cmp	r3, #0
 8001908:	f000 80e9 	beq.w	8001ade <HAL_RCC_OscConfig+0x9b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800190c:	4b12      	ldr	r3, [pc, #72]	; (8001958 <HAL_RCC_OscConfig+0x82c>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 030c 	and.w	r3, r3, #12
 8001914:	2b0c      	cmp	r3, #12
 8001916:	f000 80a3 	beq.w	8001a60 <HAL_RCC_OscConfig+0x934>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191e:	2b02      	cmp	r3, #2
 8001920:	d16a      	bne.n	80019f8 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001922:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <HAL_RCC_OscConfig+0x82c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a0c      	ldr	r2, [pc, #48]	; (8001958 <HAL_RCC_OscConfig+0x82c>)
 8001928:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800192c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192e:	f7ff f869 	bl	8000a04 <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001934:	e012      	b.n	800195c <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001936:	f7ff f865 	bl	8000a04 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d90b      	bls.n	800195c <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001944:	4b04      	ldr	r3, [pc, #16]	; (8001958 <HAL_RCC_OscConfig+0x82c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d005      	beq.n	800195c <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e0c5      	b.n	8001ae0 <HAL_RCC_OscConfig+0x9b4>
 8001954:	40007000 	.word	0x40007000
 8001958:	40021000 	.word	0x40021000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800195c:	4b62      	ldr	r3, [pc, #392]	; (8001ae8 <HAL_RCC_OscConfig+0x9bc>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1e6      	bne.n	8001936 <HAL_RCC_OscConfig+0x80a>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001968:	4b5f      	ldr	r3, [pc, #380]	; (8001ae8 <HAL_RCC_OscConfig+0x9bc>)
 800196a:	68da      	ldr	r2, [r3, #12]
 800196c:	4b5f      	ldr	r3, [pc, #380]	; (8001aec <HAL_RCC_OscConfig+0x9c0>)
 800196e:	4013      	ands	r3, r2
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001978:	3a01      	subs	r2, #1
 800197a:	0112      	lsls	r2, r2, #4
 800197c:	4311      	orrs	r1, r2
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001982:	0212      	lsls	r2, r2, #8
 8001984:	4311      	orrs	r1, r2
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800198a:	0852      	lsrs	r2, r2, #1
 800198c:	3a01      	subs	r2, #1
 800198e:	0552      	lsls	r2, r2, #21
 8001990:	4311      	orrs	r1, r2
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001996:	0852      	lsrs	r2, r2, #1
 8001998:	3a01      	subs	r2, #1
 800199a:	0652      	lsls	r2, r2, #25
 800199c:	4311      	orrs	r1, r2
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80019a2:	06d2      	lsls	r2, r2, #27
 80019a4:	430a      	orrs	r2, r1
 80019a6:	4950      	ldr	r1, [pc, #320]	; (8001ae8 <HAL_RCC_OscConfig+0x9bc>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019ac:	4b4e      	ldr	r3, [pc, #312]	; (8001ae8 <HAL_RCC_OscConfig+0x9bc>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a4d      	ldr	r2, [pc, #308]	; (8001ae8 <HAL_RCC_OscConfig+0x9bc>)
 80019b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019b6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019b8:	4b4b      	ldr	r3, [pc, #300]	; (8001ae8 <HAL_RCC_OscConfig+0x9bc>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	4a4a      	ldr	r2, [pc, #296]	; (8001ae8 <HAL_RCC_OscConfig+0x9bc>)
 80019be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c4:	f7ff f81e 	bl	8000a04 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ca:	e00e      	b.n	80019ea <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019cc:	f7ff f81a 	bl	8000a04 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d907      	bls.n	80019ea <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019da:	4b43      	ldr	r3, [pc, #268]	; (8001ae8 <HAL_RCC_OscConfig+0x9bc>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e07a      	b.n	8001ae0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ea:	4b3f      	ldr	r3, [pc, #252]	; (8001ae8 <HAL_RCC_OscConfig+0x9bc>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0ea      	beq.n	80019cc <HAL_RCC_OscConfig+0x8a0>
 80019f6:	e072      	b.n	8001ade <HAL_RCC_OscConfig+0x9b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f8:	4b3b      	ldr	r3, [pc, #236]	; (8001ae8 <HAL_RCC_OscConfig+0x9bc>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a3a      	ldr	r2, [pc, #232]	; (8001ae8 <HAL_RCC_OscConfig+0x9bc>)
 80019fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a02:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001a04:	4b38      	ldr	r3, [pc, #224]	; (8001ae8 <HAL_RCC_OscConfig+0x9bc>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d105      	bne.n	8001a1c <HAL_RCC_OscConfig+0x8f0>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a10:	4b35      	ldr	r3, [pc, #212]	; (8001ae8 <HAL_RCC_OscConfig+0x9bc>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	4a34      	ldr	r2, [pc, #208]	; (8001ae8 <HAL_RCC_OscConfig+0x9bc>)
 8001a16:	f023 0303 	bic.w	r3, r3, #3
 8001a1a:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a1c:	4b32      	ldr	r3, [pc, #200]	; (8001ae8 <HAL_RCC_OscConfig+0x9bc>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	4a31      	ldr	r2, [pc, #196]	; (8001ae8 <HAL_RCC_OscConfig+0x9bc>)
 8001a22:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a2a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7fe ffea 	bl	8000a04 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a32:	e00e      	b.n	8001a52 <HAL_RCC_OscConfig+0x926>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a34:	f7fe ffe6 	bl	8000a04 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d907      	bls.n	8001a52 <HAL_RCC_OscConfig+0x926>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a42:	4b29      	ldr	r3, [pc, #164]	; (8001ae8 <HAL_RCC_OscConfig+0x9bc>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <HAL_RCC_OscConfig+0x926>
            {
              return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e046      	b.n	8001ae0 <HAL_RCC_OscConfig+0x9b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a52:	4b25      	ldr	r3, [pc, #148]	; (8001ae8 <HAL_RCC_OscConfig+0x9bc>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1ea      	bne.n	8001a34 <HAL_RCC_OscConfig+0x908>
 8001a5e:	e03e      	b.n	8001ade <HAL_RCC_OscConfig+0x9b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d101      	bne.n	8001a6c <HAL_RCC_OscConfig+0x940>
      {
        return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e039      	b.n	8001ae0 <HAL_RCC_OscConfig+0x9b4>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001a6c:	4b1e      	ldr	r3, [pc, #120]	; (8001ae8 <HAL_RCC_OscConfig+0x9bc>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	f003 0203 	and.w	r2, r3, #3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d12c      	bne.n	8001ada <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d123      	bne.n	8001ada <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a9c:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d11b      	bne.n	8001ada <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aac:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d113      	bne.n	8001ada <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abc:	085b      	lsrs	r3, r3, #1
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d109      	bne.n	8001ada <HAL_RCC_OscConfig+0x9ae>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad0:	085b      	lsrs	r3, r3, #1
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d001      	beq.n	8001ade <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e000      	b.n	8001ae0 <HAL_RCC_OscConfig+0x9b4>
        }
      }
    }
  }

  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3720      	adds	r7, #32
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	019f800c 	.word	0x019f800c

08001af0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e10d      	b.n	8001d24 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b08:	4b88      	ldr	r3, [pc, #544]	; (8001d2c <HAL_RCC_ClockConfig+0x23c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 030f 	and.w	r3, r3, #15
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d910      	bls.n	8001b38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b16:	4b85      	ldr	r3, [pc, #532]	; (8001d2c <HAL_RCC_ClockConfig+0x23c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f023 020f 	bic.w	r2, r3, #15
 8001b1e:	4983      	ldr	r1, [pc, #524]	; (8001d2c <HAL_RCC_ClockConfig+0x23c>)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b26:	4b81      	ldr	r3, [pc, #516]	; (8001d2c <HAL_RCC_ClockConfig+0x23c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d001      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e0f5      	b.n	8001d24 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 8094 	beq.w	8001c6e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b03      	cmp	r3, #3
 8001b4c:	d134      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b4e:	4b78      	ldr	r3, [pc, #480]	; (8001d30 <HAL_RCC_ClockConfig+0x240>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e0e2      	b.n	8001d24 <HAL_RCC_ClockConfig+0x234>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001b5e:	f000 fa03 	bl	8001f68 <RCC_GetSysClockFreqFromPLLSource>
 8001b62:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	4a73      	ldr	r2, [pc, #460]	; (8001d34 <HAL_RCC_ClockConfig+0x244>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d956      	bls.n	8001c1a <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001b6c:	4b70      	ldr	r3, [pc, #448]	; (8001d30 <HAL_RCC_ClockConfig+0x240>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d10a      	bne.n	8001b8e <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b78:	4b6d      	ldr	r3, [pc, #436]	; (8001d30 <HAL_RCC_ClockConfig+0x240>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b80:	4a6b      	ldr	r2, [pc, #428]	; (8001d30 <HAL_RCC_ClockConfig+0x240>)
 8001b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b86:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b88:	2380      	movs	r3, #128	; 0x80
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	e045      	b.n	8001c1a <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d03f      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d13b      	bne.n	8001c1a <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ba2:	4b63      	ldr	r3, [pc, #396]	; (8001d30 <HAL_RCC_ClockConfig+0x240>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001baa:	4a61      	ldr	r2, [pc, #388]	; (8001d30 <HAL_RCC_ClockConfig+0x240>)
 8001bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bb0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001bb2:	2380      	movs	r3, #128	; 0x80
 8001bb4:	617b      	str	r3, [r7, #20]
 8001bb6:	e030      	b.n	8001c1a <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d107      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bc0:	4b5b      	ldr	r3, [pc, #364]	; (8001d30 <HAL_RCC_ClockConfig+0x240>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d115      	bne.n	8001bf8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0a9      	b.n	8001d24 <HAL_RCC_ClockConfig+0x234>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d107      	bne.n	8001be8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bd8:	4b55      	ldr	r3, [pc, #340]	; (8001d30 <HAL_RCC_ClockConfig+0x240>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d109      	bne.n	8001bf8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e09d      	b.n	8001d24 <HAL_RCC_ClockConfig+0x234>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001be8:	4b51      	ldr	r3, [pc, #324]	; (8001d30 <HAL_RCC_ClockConfig+0x240>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e095      	b.n	8001d24 <HAL_RCC_ClockConfig+0x234>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001bf8:	f000 f8a2 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 8001bfc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	4a4c      	ldr	r2, [pc, #304]	; (8001d34 <HAL_RCC_ClockConfig+0x244>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d909      	bls.n	8001c1a <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c06:	4b4a      	ldr	r3, [pc, #296]	; (8001d30 <HAL_RCC_ClockConfig+0x240>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c0e:	4a48      	ldr	r2, [pc, #288]	; (8001d30 <HAL_RCC_ClockConfig+0x240>)
 8001c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c14:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001c16:	2380      	movs	r3, #128	; 0x80
 8001c18:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c1a:	4b45      	ldr	r3, [pc, #276]	; (8001d30 <HAL_RCC_ClockConfig+0x240>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f023 0203 	bic.w	r2, r3, #3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	4942      	ldr	r1, [pc, #264]	; (8001d30 <HAL_RCC_ClockConfig+0x240>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c2c:	f7fe feea 	bl	8000a04 <HAL_GetTick>
 8001c30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c32:	e013      	b.n	8001c5c <HAL_RCC_ClockConfig+0x16c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c34:	f7fe fee6 	bl	8000a04 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d90a      	bls.n	8001c5c <HAL_RCC_ClockConfig+0x16c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c46:	4b3a      	ldr	r3, [pc, #232]	; (8001d30 <HAL_RCC_ClockConfig+0x240>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 020c 	and.w	r2, r3, #12
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d001      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x16c>
        {
          return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e063      	b.n	8001d24 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5c:	4b34      	ldr	r3, [pc, #208]	; (8001d30 <HAL_RCC_ClockConfig+0x240>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 020c 	and.w	r2, r3, #12
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d1e2      	bne.n	8001c34 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d009      	beq.n	8001c8e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c7a:	4b2d      	ldr	r3, [pc, #180]	; (8001d30 <HAL_RCC_ClockConfig+0x240>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	492a      	ldr	r1, [pc, #168]	; (8001d30 <HAL_RCC_ClockConfig+0x240>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	608b      	str	r3, [r1, #8]
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_ClockConfig+0x1b0>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	2b80      	cmp	r3, #128	; 0x80
 8001c92:	d105      	bne.n	8001ca0 <HAL_RCC_ClockConfig+0x1b0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001c94:	4b26      	ldr	r3, [pc, #152]	; (8001d30 <HAL_RCC_ClockConfig+0x240>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	4a25      	ldr	r2, [pc, #148]	; (8001d30 <HAL_RCC_ClockConfig+0x240>)
 8001c9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c9e:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ca0:	4b22      	ldr	r3, [pc, #136]	; (8001d2c <HAL_RCC_ClockConfig+0x23c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 030f 	and.w	r3, r3, #15
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d210      	bcs.n	8001cd0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cae:	4b1f      	ldr	r3, [pc, #124]	; (8001d2c <HAL_RCC_ClockConfig+0x23c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f023 020f 	bic.w	r2, r3, #15
 8001cb6:	491d      	ldr	r1, [pc, #116]	; (8001d2c <HAL_RCC_ClockConfig+0x23c>)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cbe:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <HAL_RCC_ClockConfig+0x23c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d001      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e029      	b.n	8001d24 <HAL_RCC_ClockConfig+0x234>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d008      	beq.n	8001cee <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cdc:	4b14      	ldr	r3, [pc, #80]	; (8001d30 <HAL_RCC_ClockConfig+0x240>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	4911      	ldr	r1, [pc, #68]	; (8001d30 <HAL_RCC_ClockConfig+0x240>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0308 	and.w	r3, r3, #8
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d009      	beq.n	8001d0e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cfa:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <HAL_RCC_ClockConfig+0x240>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	4909      	ldr	r1, [pc, #36]	; (8001d30 <HAL_RCC_ClockConfig+0x240>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001d0e:	f000 f8b3 	bl	8001e78 <HAL_RCC_GetHCLKFreq>
 8001d12:	4603      	mov	r3, r0
 8001d14:	4a08      	ldr	r2, [pc, #32]	; (8001d38 <HAL_RCC_ClockConfig+0x248>)
 8001d16:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d18:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <HAL_RCC_ClockConfig+0x24c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe fe21 	bl	8000964 <HAL_InitTick>
 8001d22:	4603      	mov	r3, r0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40022000 	.word	0x40022000
 8001d30:	40021000 	.word	0x40021000
 8001d34:	04c4b400 	.word	0x04c4b400
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	20000004 	.word	0x20000004

08001d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b089      	sub	sp, #36	; 0x24
 8001d44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d4e:	4b47      	ldr	r3, [pc, #284]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x12c>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 030c 	and.w	r3, r3, #12
 8001d56:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d58:	4b44      	ldr	r3, [pc, #272]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x12c>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f003 0303 	and.w	r3, r3, #3
 8001d60:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d005      	beq.n	8001d74 <HAL_RCC_GetSysClockFreq+0x34>
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	2b0c      	cmp	r3, #12
 8001d6c:	d121      	bne.n	8001db2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d11e      	bne.n	8001db2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d74:	4b3d      	ldr	r3, [pc, #244]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x12c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0308 	and.w	r3, r3, #8
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d107      	bne.n	8001d90 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d80:	4b3a      	ldr	r3, [pc, #232]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x12c>)
 8001d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d86:	0a1b      	lsrs	r3, r3, #8
 8001d88:	f003 030f 	and.w	r3, r3, #15
 8001d8c:	61fb      	str	r3, [r7, #28]
 8001d8e:	e005      	b.n	8001d9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d90:	4b36      	ldr	r3, [pc, #216]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x12c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	091b      	lsrs	r3, r3, #4
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8001d9c:	4a34      	ldr	r2, [pc, #208]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x130>)
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da4:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d10d      	bne.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001db0:	e00a      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d102      	bne.n	8001dbe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001db8:	4b2e      	ldr	r3, [pc, #184]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x134>)
 8001dba:	61bb      	str	r3, [r7, #24]
 8001dbc:	e004      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	2b08      	cmp	r3, #8
 8001dc2:	d101      	bne.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001dc4:	4b2b      	ldr	r3, [pc, #172]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x134>)
 8001dc6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	2b0c      	cmp	r3, #12
 8001dcc:	d146      	bne.n	8001e5c <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001dce:	4b27      	ldr	r3, [pc, #156]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x12c>)
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dd8:	4b24      	ldr	r3, [pc, #144]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x12c>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	091b      	lsrs	r3, r3, #4
 8001dde:	f003 030f 	and.w	r3, r3, #15
 8001de2:	3301      	adds	r3, #1
 8001de4:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d003      	beq.n	8001df4 <HAL_RCC_GetSysClockFreq+0xb4>
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	2b03      	cmp	r3, #3
 8001df0:	d00d      	beq.n	8001e0e <HAL_RCC_GetSysClockFreq+0xce>
 8001df2:	e019      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001df4:	4a1f      	ldr	r2, [pc, #124]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x134>)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dfc:	4a1b      	ldr	r2, [pc, #108]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x12c>)
 8001dfe:	68d2      	ldr	r2, [r2, #12]
 8001e00:	0a12      	lsrs	r2, r2, #8
 8001e02:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e06:	fb02 f303 	mul.w	r3, r2, r3
 8001e0a:	617b      	str	r3, [r7, #20]
        break;
 8001e0c:	e019      	b.n	8001e42 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e0e:	4a19      	ldr	r2, [pc, #100]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x134>)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e16:	4a15      	ldr	r2, [pc, #84]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x12c>)
 8001e18:	68d2      	ldr	r2, [r2, #12]
 8001e1a:	0a12      	lsrs	r2, r2, #8
 8001e1c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e20:	fb02 f303 	mul.w	r3, r2, r3
 8001e24:	617b      	str	r3, [r7, #20]
        break;
 8001e26:	e00c      	b.n	8001e42 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e28:	69fa      	ldr	r2, [r7, #28]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e30:	4a0e      	ldr	r2, [pc, #56]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x12c>)
 8001e32:	68d2      	ldr	r2, [r2, #12]
 8001e34:	0a12      	lsrs	r2, r2, #8
 8001e36:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e3a:	fb02 f303 	mul.w	r3, r2, r3
 8001e3e:	617b      	str	r3, [r7, #20]
        break;
 8001e40:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8001e42:	4b0a      	ldr	r3, [pc, #40]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x12c>)
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	0e5b      	lsrs	r3, r3, #25
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e5c:	69bb      	ldr	r3, [r7, #24]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3724      	adds	r7, #36	; 0x24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	080020d8 	.word	0x080020d8
 8001e74:	00f42400 	.word	0x00f42400

08001e78 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8001e7c:	f7ff ff60 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 8001e80:	4602      	mov	r2, r0
 8001e82:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <HAL_RCC_GetHCLKFreq+0x20>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	091b      	lsrs	r3, r3, #4
 8001e88:	f003 030f 	and.w	r3, r3, #15
 8001e8c:	4903      	ldr	r1, [pc, #12]	; (8001e9c <HAL_RCC_GetHCLKFreq+0x24>)
 8001e8e:	5ccb      	ldrb	r3, [r1, r3]
 8001e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	080020c8 	.word	0x080020c8

08001ea0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001eac:	4b2c      	ldr	r3, [pc, #176]	; (8001f60 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001eb8:	f7ff f89a 	bl	8000ff0 <HAL_PWREx_GetVoltageRange>
 8001ebc:	6138      	str	r0, [r7, #16]
 8001ebe:	e014      	b.n	8001eea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ec0:	4b27      	ldr	r3, [pc, #156]	; (8001f60 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec4:	4a26      	ldr	r2, [pc, #152]	; (8001f60 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eca:	6593      	str	r3, [r2, #88]	; 0x58
 8001ecc:	4b24      	ldr	r3, [pc, #144]	; (8001f60 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ed8:	f7ff f88a 	bl	8000ff0 <HAL_PWREx_GetVoltageRange>
 8001edc:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ede:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee2:	4a1f      	ldr	r2, [pc, #124]	; (8001f60 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001ee4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ee8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ef6:	d10b      	bne.n	8001f10 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b80      	cmp	r3, #128	; 0x80
 8001efc:	d919      	bls.n	8001f32 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2ba0      	cmp	r3, #160	; 0xa0
 8001f02:	d902      	bls.n	8001f0a <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f04:	2302      	movs	r3, #2
 8001f06:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8001f08:	e013      	b.n	8001f32 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8001f0e:	e010      	b.n	8001f32 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b80      	cmp	r3, #128	; 0x80
 8001f14:	d902      	bls.n	8001f1c <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f16:	2303      	movs	r3, #3
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	e00a      	b.n	8001f32 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b80      	cmp	r3, #128	; 0x80
 8001f20:	d102      	bne.n	8001f28 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f22:	2302      	movs	r3, #2
 8001f24:	617b      	str	r3, [r7, #20]
 8001f26:	e004      	b.n	8001f32 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b70      	cmp	r3, #112	; 0x70
 8001f2c:	d101      	bne.n	8001f32 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f2e:	2301      	movs	r3, #1
 8001f30:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f32:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f023 020f 	bic.w	r2, r3, #15
 8001f3a:	490a      	ldr	r1, [pc, #40]	; (8001f64 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8001f42:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d001      	beq.n	8001f54 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e000      	b.n	8001f56 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40022000 	.word	0x40022000

08001f68 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b087      	sub	sp, #28
 8001f6c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8001f72:	4b36      	ldr	r3, [pc, #216]	; (800204c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d118      	bne.n	8001fb0 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f7e:	4b33      	ldr	r3, [pc, #204]	; (800204c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d107      	bne.n	8001f9a <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f8a:	4b30      	ldr	r3, [pc, #192]	; (800204c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8001f8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f90:	0a1b      	lsrs	r3, r3, #8
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	617b      	str	r3, [r7, #20]
 8001f98:	e005      	b.n	8001fa6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f9a:	4b2c      	ldr	r3, [pc, #176]	; (800204c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	091b      	lsrs	r3, r3, #4
 8001fa0:	f003 030f 	and.w	r3, r3, #15
 8001fa4:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8001fa6:	4a2a      	ldr	r2, [pc, #168]	; (8002050 <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fae:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fb0:	4b26      	ldr	r3, [pc, #152]	; (800204c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f003 0303 	and.w	r3, r3, #3
 8001fb8:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fba:	4b24      	ldr	r3, [pc, #144]	; (800204c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	091b      	lsrs	r3, r3, #4
 8001fc0:	f003 030f 	and.w	r3, r3, #15
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d003      	beq.n	8001fd6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2b03      	cmp	r3, #3
 8001fd2:	d00d      	beq.n	8001ff0 <RCC_GetSysClockFreqFromPLLSource+0x88>
 8001fd4:	e019      	b.n	800200a <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fd6:	4a1f      	ldr	r2, [pc, #124]	; (8002054 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fde:	4a1b      	ldr	r2, [pc, #108]	; (800204c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8001fe0:	68d2      	ldr	r2, [r2, #12]
 8001fe2:	0a12      	lsrs	r2, r2, #8
 8001fe4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fe8:	fb02 f303 	mul.w	r3, r2, r3
 8001fec:	613b      	str	r3, [r7, #16]
      break;
 8001fee:	e019      	b.n	8002024 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ff0:	4a18      	ldr	r2, [pc, #96]	; (8002054 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff8:	4a14      	ldr	r2, [pc, #80]	; (800204c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8001ffa:	68d2      	ldr	r2, [r2, #12]
 8001ffc:	0a12      	lsrs	r2, r2, #8
 8001ffe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002002:	fb02 f303 	mul.w	r3, r2, r3
 8002006:	613b      	str	r3, [r7, #16]
      break;
 8002008:	e00c      	b.n	8002024 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002012:	4a0e      	ldr	r2, [pc, #56]	; (800204c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002014:	68d2      	ldr	r2, [r2, #12]
 8002016:	0a12      	lsrs	r2, r2, #8
 8002018:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800201c:	fb02 f303 	mul.w	r3, r2, r3
 8002020:	613b      	str	r3, [r7, #16]
      break;
 8002022:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8002024:	4b09      	ldr	r3, [pc, #36]	; (800204c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	0e5b      	lsrs	r3, r3, #25
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	3301      	adds	r3, #1
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	fbb2 f3f3 	udiv	r3, r2, r3
 800203c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800203e:	683b      	ldr	r3, [r7, #0]
}
 8002040:	4618      	mov	r0, r3
 8002042:	371c      	adds	r7, #28
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	40021000 	.word	0x40021000
 8002050:	080020d8 	.word	0x080020d8
 8002054:	00f42400 	.word	0x00f42400

08002058 <__libc_init_array>:
 8002058:	b570      	push	{r4, r5, r6, lr}
 800205a:	4d0d      	ldr	r5, [pc, #52]	; (8002090 <__libc_init_array+0x38>)
 800205c:	2600      	movs	r6, #0
 800205e:	4c0d      	ldr	r4, [pc, #52]	; (8002094 <__libc_init_array+0x3c>)
 8002060:	1b64      	subs	r4, r4, r5
 8002062:	10a4      	asrs	r4, r4, #2
 8002064:	42a6      	cmp	r6, r4
 8002066:	d109      	bne.n	800207c <__libc_init_array+0x24>
 8002068:	4d0b      	ldr	r5, [pc, #44]	; (8002098 <__libc_init_array+0x40>)
 800206a:	2600      	movs	r6, #0
 800206c:	4c0b      	ldr	r4, [pc, #44]	; (800209c <__libc_init_array+0x44>)
 800206e:	f000 f81f 	bl	80020b0 <_init>
 8002072:	1b64      	subs	r4, r4, r5
 8002074:	10a4      	asrs	r4, r4, #2
 8002076:	42a6      	cmp	r6, r4
 8002078:	d105      	bne.n	8002086 <__libc_init_array+0x2e>
 800207a:	bd70      	pop	{r4, r5, r6, pc}
 800207c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002080:	3601      	adds	r6, #1
 8002082:	4798      	blx	r3
 8002084:	e7ee      	b.n	8002064 <__libc_init_array+0xc>
 8002086:	f855 3b04 	ldr.w	r3, [r5], #4
 800208a:	3601      	adds	r6, #1
 800208c:	4798      	blx	r3
 800208e:	e7f2      	b.n	8002076 <__libc_init_array+0x1e>
 8002090:	08002118 	.word	0x08002118
 8002094:	08002118 	.word	0x08002118
 8002098:	08002118 	.word	0x08002118
 800209c:	0800211c 	.word	0x0800211c

080020a0 <memset>:
 80020a0:	4402      	add	r2, r0
 80020a2:	4603      	mov	r3, r0
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d100      	bne.n	80020aa <memset+0xa>
 80020a8:	4770      	bx	lr
 80020aa:	f803 1b01 	strb.w	r1, [r3], #1
 80020ae:	e7f9      	b.n	80020a4 <memset+0x4>

080020b0 <_init>:
 80020b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020b2:	bf00      	nop
 80020b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020b6:	bc08      	pop	{r3}
 80020b8:	469e      	mov	lr, r3
 80020ba:	4770      	bx	lr

080020bc <_fini>:
 80020bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020be:	bf00      	nop
 80020c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020c2:	bc08      	pop	{r3}
 80020c4:	469e      	mov	lr, r3
 80020c6:	4770      	bx	lr
